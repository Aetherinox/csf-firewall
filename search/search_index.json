{"config": {"lang": ["en"], "separator": "[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "ConfigServer Firewall", "text": "<p>Welcome to the ConfigServer documentation</p>"}, {"location": "about_csf/", "title": "About CSF", "text": "", "tags": ["info"]}, {"location": "about_csf/#about-configserver-firewall", "title": "About ConfigServer Firewall", "text": "<p>ConfigServer Firewall, also known as CSF, is a Stateful Packet Inspection (SPI) firewall, Login/Intrusion Detection and Security application for Linux servers. CSF provides better security for your server while giving you an advanced, easy to use interface for managing firewall settings. CSF configures your server\u2019s firewall to lock down public access to services and only allow certain connections, such as logging in to FTP, checking email, or loading websites.</p> <p>ConfigServer Firewall also comes with a service called Login Failure Daemon, or LFD. LFD watches your user activity for excessive login failures which are commonly seen during brute force attacks. If a large number of login failures are seen coming from the same IP address, that IP will immediately be temporarily blocked from all services on your server. These IP blocks will automatically expire, however they can be removed manually through the ConfigServer interface in WebHost Manager. In addition to removing IPs, CSF also allows you to manually whitelist or blacklist IPs in your firewall, as well as real-time monitoring for automatic IP blocks in LFD. Configuration details are covered in Managing Your CSF Firewall.</p> <p></p> <p>When installing CSF; you will be provided with two services:</p> Service Description <code>csf</code> ConfigServer Firewall (csf): SPI iptables firewall which allows you to restrict what is allowed to communicate with your server. <code>lfd</code> Login Failure Daemon (lfd): Process that runs all the time and periodically (every X seconds) scans the latest log file entries for login attempts against your server that continually fail within a short period of time. <p></p> <p></p> <p>A partial list of ConfigServer Firewall features are outlined below.</p> <p></p> <ul> <li>Straight-forward SPI iptables firewall script</li> <li>Daemon process that checks for login authentication failures for:<ul> <li>Courier imap, Dovecot, uw-imap, Kerio</li> <li>openSSH</li> <li>cPanel, WHM, Webmail (cPanel servers only)</li> <li>Pure-ftpd, vsftpd, Proftpd</li> <li>Password protected web pages (htpasswd)</li> <li>Mod_security failures (v1 and v2)</li> <li>Suhosin failures</li> <li>Exim SMTP AUTH</li> <li>Custom login failures with separate log file and regular expression matching</li> </ul> </li> <li>POP3/IMAP login tracking to enforce logins per hour</li> <li>SSH login notification</li> <li>SU login notification</li> <li>Excessive connection blocking</li> <li>UI Integration for cPanel, DirectAdmin, InterWorx, CentOS Web Panel (CWP), VestaCP, CyberPanel - and Webmin</li> <li>Easy upgrade between versions from within the control panel</li> <li>Easy upgrade between versions from shell</li> <li>Pre-configured to work on a cPanel server with all the standard cPanel ports open</li> <li>Pre-configured to work on a DirectAdmin server with all the standard DirectAdmin ports open</li> <li>Auto-configures the SSH port if it\u2019s non-standard on installation</li> <li>Block traffic on unused server IP addresses \u2013 helps reduce the risk to your server</li> <li>Alert when end-user scripts sending excessive emails per hour \u2013 for identifying spamming scripts</li> <li>Suspicious process reporting \u2013 reports potential exploits running on the server</li> <li>Excessive user processes reporting</li> <li>Excessive user process usage reporting and optional termination</li> <li>Suspicious file reporting \u2013 reports potential exploit files in /tmp and similar directories</li> <li>Directory and file watching \u2013 reports if a watched directory or a file changes</li> <li>Block traffic on a variety of Block Lists including DShield Block List and Spamhaus DROP List</li> <li>BOGON packet protection</li> <li>Pre-configured settings for Low, Medium or High firewall security (cPanel servers only)</li> <li>Works with multiple ethernet devices</li> <li>Server Security Check \u2013 Performs a basic security and settings check on the server (via cPanel/- DirectAdmin/Webmin UI)</li> <li>Allow Dynamic DNS IP addresses \u2013 always allow your IP address even if it changes whenever you connect to the internet</li> <li>Alert sent if server load average remains high for a specified length of time</li> <li>mod_security log reporting (if installed)</li> <li>Email relay tracking \u2013 tracks all email sent through the server and issues alerts for excessive usage (cPanel servers only)</li> <li>IDS (Intrusion Detection System) \u2013 the last line of detection alerts you to changes to system and application binaries</li> <li>SYN Flood protection</li> <li>Ping of death protection</li> <li>Port Scan tracking and blocking</li> <li>Permanent and Temporary (with TTL) IP blocking</li> <li>Exploit checks</li> <li>Account modification tracking \u2013 sends alerts if an account entry is modified, e.g. if the password is changed or the login shell</li> <li>Shared syslog aware</li> <li>Messenger Service \u2013 Allows you to redirect connection requests from blocked IP addresses to preconfigured text and html pages to inform the visitor that they have been blocked in the firewall. This can be particularly useful for those with a large user base and help process support requests more efficiently</li> <li>Country Code blocking \u2013 Allows you to deny or allow access by ISO Country Code</li> <li>Port Flooding Detection \u2013 Per IP, per Port connection flooding detection and mitigation to help block DOS attacks</li> <li>WHM root access notification (cPanel servers only)</li> <li>lfd Clustering \u2013 allows IP address blocks to be automatically propagated around a group of servers running lfd. It allows allows cluster-wide allows, removals and configuration changes</li> <li>Quick start csf \u2013 deferred startup by lfd for servers with large block and/or allow lists</li> <li>Distributed Login Failure Attack detection</li> <li>Temporary IP allows (with TTL)</li> <li>IPv6 Support with ip6tables</li> <li>Integrated UI \u2013 no need for a separate Control Panel or Apache to use the csf configuration</li> <li>Integrated support for cse within the Integrated UI</li> <li>cPanel Reseller access to per reseller configurable options Unblock, Deny, Allow and Search IP address blocks</li> <li>System Statistics \u2013 Basic graphs showing the performance of the server, e.g. Load Averages, CPU Usage, Memory Usage, etc</li> <li>ipset support for large IP lists</li> <li>Integrated with the CloudFlare Firewall</li> <li>\u2026lots more!</li> </ul> <p></p> <p></p>", "tags": ["info"]}, {"location": "about_patcher/", "title": "How this patcher works", "text": "", "tags": ["info"]}, {"location": "about_patcher/#how-patcher-works", "title": "How Patcher Works", "text": "<p>This section is optional to read. It simply outlines what the patcher does from the time of execution to better explain what will be happening on your systen.</p> <p></p> <ul> <li>Download all the files in the <code>/patch</code> folder to your system.</li> <li>Set the <code>install.sh</code> file to be executable.<ul> <li><code>sudo chmod +x install.sh</code></li> </ul> </li> <li>Run the <code>install.sh</code> script<ul> <li><code>sudo ./install.sh</code></li> <li>The script will first check to see if you have ConfigServer Firewall and all of its prerequisites installed. It will install them if they are not installed. This includes:<ul> <li>ConfigServer Firewall</li> <li>ipset package</li> <li>iptables / ip6tables package</li> </ul> </li> <li>Two new files will be added:<ul> <li><code>/usr/local/csf/bin/csfpre.sh</code></li> <li><code>/usr/local/csf/bin/csfpost.sh</code></li> </ul> </li> <li>The patches will then be moved onto your system in the locations:<ul> <li><code>/usr/local/include/csf/post.d/docker.sh</code></li> <li><code>/usr/local/include/csf/post.d/openvpn.sh</code></li> </ul> </li> <li>The <code>Docker</code> patch will first check to ensure you have the following:<ul> <li>Must have Docker installed</li> <li>This script will NOT install docker. You must do that.</li> <li>Must have a valid docker network adapter named <code>docker*</code> or <code>br-*</code></li> </ul> </li> <li>The <code>OpenVPN</code> patch will first check to ensure you have the following:<ul> <li>Must have OpenVPN Server installed</li> <li>Must have a valid network tunnel named <code>tun*</code> (tun0, tun1, etc)</li> <li>Must have an outside network adapter named either <code>eth*</code> or <code>enp*</code></li> <li>If any of the checks above are not true, OpenVPN patcher will skip</li> <li>You can check your list of network adapters using any of the commands below:<ul> <li><code>ip link show</code></li> <li><code>ifconfig</code></li> </ul> </li> <li>You can check if OpenVPN server is installed by using the commmand:<ul> <li><code>openvpn --version</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> <p></p> <ul> <li>If you attempt to run the <code>install.sh</code> any time after the initial setup:<ul> <li>The script will check if ConfigServer Firewall and all prerequisites are installed.<ul> <li>If they are not installed; they will be installed.</li> <li>If they are already installed; nothing will happen. The script does NOT update your packages. It installs the latest version of each package from the time that you run the script and do not already have ConfigServer Firewall installed.</li> </ul> </li> <li>The script will look at all of the files it added the first time and check the MD5 hash.<ul> <li>If the <code>csfpre</code>, <code>csfpost</code>, or patch files do not exist; they will be re-added to your system.</li> <li>If the patch files are different from the one the patcher comes with, you will be prompted / asked if you wish to overwrite your already installed copy</li> <li>If the patch files are the same as the ones which comes with the patcher; nothing will be done and it will skip that step.</li> </ul> </li> </ul> </li> </ul> <p></p> <p></p>", "tags": ["info"]}, {"location": "home/", "title": "Home", "text": "ConfigServer Firewall <p>This documentation is related to the github repository for ConfigServer Firewall; a popular and powerful firewall solution for Linux servers. On top of documentation for the software itself; this repository includes added patches which allow you to seamlessly integrate Docker and OpenVPN server with ConfigServer Firewall so that all of the services can communicate between each other without interruption.</p> <p>This documentation covers the following:</p> <ul> <li>Install, Configure &amp; Manage CSF (ConfigServer Firewall)</li> <li>Install CSF WebUI interface</li> <li>Install patches<ul> <li>Docker Integration</li> <li>OpenVPN Integration</li> </ul> </li> <li>Install dark theme</li> </ul> <p></p> <p></p>", "tags": ["home"]}, {"location": "about/backers/", "title": "Backers", "text": ""}, {"location": "about/changelog/", "title": "Changelog", "text": "", "tags": ["changelog"]}, {"location": "about/changelog/#changelog", "title": "Changelog", "text": "", "tags": ["changelog"]}, {"location": "about/changelog/#14.22.0", "title": "14.22.0 Sep 20, 2024", "text": "<ul> <li><code>build</code>: Updates ConfigServer Firewall to v14.22</li> <li><code>remove</code>: session IP match check from DA login</li> <li><code>added</code>: example spamassassin temp file regex to csf.fignore for new installations</li> </ul>", "tags": ["changelog"]}, {"location": "about/changelog/#14.21.1", "title": "14.21.1 Aug 30, 2024", "text": "<ul> <li><code>change</code>: add header animations, app name returns user home</li> <li><code>change</code>: clicking app logo or name now returns user to home page</li> <li><code>change</code>: add favicon</li> <li><code>change</code>: silence curl in openvpn patch</li> <li><code>change</code>: removal of <code>NETWORK_MANUAL_MODE</code>, <code>NETWORK_ADAPT_NAME</code></li> <li><code>fix</code>: docker inspect error when container has more than one network #1</li> <li><code>docs</code>: removal of manual mode values no longer needed</li> </ul>", "tags": ["changelog"]}, {"location": "about/changelog/#14.21.0", "title": "14.21.0 Aug 29, 2024", "text": "<ul> <li><code>change</code>: new animated checkbox input for firewall profiles</li> <li><code>change</code>: clicking logo in header now re-directs user to home</li> <li><code>change</code>: enhanced login screen animations</li> <li><code>change</code>: enhanced mobile view</li> <li><code>build</code>: update main source release to CSF v14.21</li> <li><code>build</code>: dark theme now compatible with CSF v14.21</li> <li><code>fix</code>: extended sized buttons with text cutting off</li> </ul>", "tags": ["changelog"]}, {"location": "about/changelog/#14.20.2", "title": "14.20.2 Aug 28, 2024", "text": "<ul> <li><code>feat</code>: added new login page to dark theme</li> <li><code>change</code>: optimizations to load order</li> <li><code>change</code>: updated toggle switches for various setting pages</li> <li><code>change</code>: start migration of in-line style properties over to stylesheet</li> <li><code>fix</code>: interface bug which existed in light theme which caused certain divs to break</li> </ul>", "tags": ["changelog"]}, {"location": "about/changelog/#14.20.1", "title": "14.20.1 Aug 27, 2024", "text": "<ul> <li><code>feat</code>: add dark theme</li> <li><code>feat</code>: add traefik integration</li> <li><code>feat</code>: add authentik integration</li> <li><code>change</code>: new ruleset for openvpn integration</li> <li><code>change</code>: auto disable csf TESTING mode when patch ran</li> <li><code>change</code>: add <code>-r, --report</code> to display status of dependencies and setup</li> <li><code>fix</code>: openvpn ip detection</li> <li><code>ci</code>: dark theme now included with all releases as .zip</li> <li><code>ci</code>: auto-update /docs/ on push to repo</li> <li><code>docs</code>: update to include traefik and authentic integration</li> </ul>", "tags": ["changelog"]}, {"location": "about/changelog/#14.20.0", "title": "14.20.0 Aug 07, 2024", "text": "<ul> <li><code>feat</code>: add new patch <code>openvpn</code></li> <li><code>feat</code>: add new command-line arguments:<ul> <li>add <code>-d, --dev</code> for advanced logging</li> <li>add <code>-f, --flush</code> to completely remove iptable rules</li> <li>add <code>-r, --report</code> to display dependency stats, app information, etc.</li> <li>add <code>-v, --version</code> to display patcher version</li> </ul> </li> <li><code>enhance</code>: docker patch now allows for multiple ip blocks to be whitelisted</li> <li><code>refactor</code>: re-write of script</li> <li><code>refactor</code>: merge all scripts into one</li> <li><code>bug</code>: fixed issue with manual mode being disabled - #1</li> <li><code>bug</code>: fixed error <code>\"docker network inspect\" requires at least 1 argument.</code> - #1</li> <li><code>bug</code>: fixed error <code>invalid port/service '-j' error</code></li> <li><code>docs</code>: rewrite documentation to include better instructions</li> <li><code>ci</code>: add workflow to automatically grab latest version of ConfigServer Firewall and append to each release</li> </ul>", "tags": ["changelog"]}, {"location": "about/changelog/#14.19.0", "title": "14.19.0 May 06, 2024", "text": "<ul> <li><code>change</code>: switch to using iptables-nft if it exists in <code>/usr/sbin/iptables-nft</code></li> <li><code>added</code>: <code>IO::Handle::clearerr()</code> call before reading data from a log file</li> <li><code>added</code>: \"Require all granted\" to the MESSENGER .htaccess file</li> <li><code>added</code> UID/GID rules to IPv6 if enabled</li> <li><code>modified</code>: dovecot regex to look for \"failed: Connection reset by peer\"</li> </ul>", "tags": ["changelog"]}, {"location": "about/conventions/", "title": "Conventions", "text": ""}, {"location": "about/conventions/#conventions", "title": "Conventions", "text": "<p>This documentation use some symbols for illustration purposes. Before you read on, please make sure you've made yourself familiar with the following list of conventions:</p> <p></p>"}, {"location": "about/conventions/#release-type", "title": "Release Type", "text": "The tag symbol in conjunction with a version number denotes when a specific feature or behavior was added. Make sure you're at least on this version if you want to use it. <p> stable</p> <p>beta- beta</p> <p></p>"}, {"location": "about/conventions/#default", "title": "Controls", "text": "These icons define what type of control a specified setting uses. <p> toggle</p> <p> textbox</p> <p> dropdown</p> <p> button</p> <p> slider</p> <p>  color wheel</p> <p></p>"}, {"location": "about/conventions/#default", "title": "\u2013 Default Value", "text": "This defines what the default value for a setting is. <p> Specified setting has a default value</p> <p> Specified setting has no default value and is empty</p> <p> Specified setting is automatically computed by the app</p> <p></p>"}, {"location": "about/conventions/#command", "title": "\u2013 Command", "text": "This defines a command <p> Specified setting has a default value</p> <p></p>"}, {"location": "about/conventions/#experimental", "title": "\u2013 Experimental", "text": "<p>Anything listed with this icon are features or functionality that are still in development and may change in future versions.</p> <p></p>"}, {"location": "about/conventions/#required", "title": "\u2013 Required value", "text": "<p>Items listed with this symbol indicate that they are required to be set.</p> <p></p>"}, {"location": "about/conventions/#customization", "title": "\u2013 Customization", "text": "<p>This symbol denotes that the item described is a customization which affects the overall look of the app.</p> <p></p>"}, {"location": "about/conventions/#3rd-party", "title": "\u2013 3<sup>rd</sup> Party", "text": "<p>This symbol denotes that the item described is classified as something that changes the overall functionality of the plugin.</p> <p></p>"}, {"location": "about/conventions/#metadata", "title": "\u2013 Metadata property", "text": "<p>This symbol denotes that the item described is a metadata property, which can be used in Markdown documents as part of the front matter definition.</p> <p></p>"}, {"location": "about/conventions/#setting", "title": "\u2013 Configurable Setting", "text": "<p>This symbol denotes that an item is configurable by the user</p> <p></p>"}, {"location": "about/conventions/#multiple-instances", "title": "\u2013 Multiple instances", "text": "<p>This symbol denotes that the plugin supports multiple instances, i.e, that it can be used multiple times in the <code>plugins</code> setting in <code>mkdocs.yml</code>.</p> <p></p>"}, {"location": "about/conventions/#feature", "title": "\u2013 Optional feature", "text": "<p>Most of the features are hidden behind feature flags, which means they must be explicitly enabled via <code>mkdocs.yml</code>. This allows for the existence of potentially orthogonal features.</p> <p></p>"}, {"location": "about/conventions/#backers-only", "title": "\u2013 Backers only", "text": "<p>The pumping heart symbol denotes that a specific feature or behavior is only available to backers. Normal users will not have access to this particular item.</p> <p></p> <p></p>"}, {"location": "about/license/", "title": "License", "text": ""}, {"location": "about/license/#license", "title": "License", "text": "<p>MIT License</p> <p>Copyright \u00a9 2024 Aetherinox</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <p></p> <p></p>"}, {"location": "about/tags/", "title": "Tags", "text": ""}, {"location": "about/tags/#tags", "title": "Tags", "text": "<p>Following is a list of relevant tags:</p>"}, {"location": "about/tags/#tag:changelog", "title": "changelog", "text": "<ul> <li>            Changelog          </li> </ul>"}, {"location": "about/tags/#tag:cheatsheet", "title": "cheatsheet", "text": "<ul> <li>            Commands          </li> <li>            Structure          </li> <li>            Troubleshooting          </li> </ul>"}, {"location": "about/tags/#tag:configure", "title": "configure", "text": "<ul> <li>            Authentik Integration          </li> <li>            Commands          </li> <li>            Configure          </li> <li>            Example csf.conf          </li> <li>            Geo Blocking          </li> <li>            Structure          </li> <li>            Traefik Integration          </li> <li>            Troubleshooting          </li> </ul>"}, {"location": "about/tags/#tag:home", "title": "home", "text": "<ul> <li>            Home          </li> </ul>"}, {"location": "about/tags/#tag:info", "title": "info", "text": "<ul> <li>            About CSF          </li> <li>            About Patcher          </li> </ul>"}, {"location": "about/tags/#tag:install", "title": "install", "text": "<ul> <li>            Configure          </li> <li>            Download          </li> <li>            Install          </li> <li>            Install          </li> <li>            Install WebUI          </li> <li>            Test Install          </li> <li>            Uninstall          </li> </ul>"}, {"location": "about/tags/#tag:patch", "title": "patch", "text": "<ul> <li>            Configure          </li> <li>            Download          </li> </ul>"}, {"location": "about/tags/#tag:themes", "title": "themes", "text": "<ul> <li>            Install          </li> </ul>"}, {"location": "about/tags/#tag:tutorials", "title": "tutorials", "text": "<ul> <li>            Authentik Integration          </li> <li>            Geo Blocking          </li> <li>            Traefik Integration          </li> </ul>"}, {"location": "blog/", "title": "Blog", "text": ""}, {"location": "blog/#blog", "title": "Blog", "text": ""}, {"location": "cheatsheet/commands/", "title": "Cheatsheet: Commands", "text": "", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#cheatsheet-commands", "title": "Cheatsheet: Commands", "text": "<p>When installing, configuring, and running CSF; it is helpful to know where files and folders are stored within your system, and what their purpose is. A list of these files and folders used by CSF are provided below:</p> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#enable", "title": "Enable", "text": "<p><code>-e,  --enable</code></p> <p>Enable csf and lfd if previously disabled</p> <pre><code>sudo csf -e\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#disable", "title": "Disable", "text": "<p><code>-x,  --disable</code></p> <p>Disable csf and lfd completely</p> <pre><code>sudo csf -x\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#start", "title": "Start", "text": "<p><code>-s,  --start</code></p> <p>Starts the firewall and applies any rules that have been configured at startup.</p> <pre><code>sudo csf -s\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#stop", "title": "Stop", "text": "<p><code>-f,  --stop</code></p> <p>Flush/Stop firewall rules (Note: lfd may restart csf)</p> <pre><code>sudo csf -f\n</code></pre> stop <pre><code>Flushing chain `INPUT'\nFlushing chain `FORWARD'\nFlushing chain `CC_ALLOWPORTS'\n[ ... ]\nDeleting chain `ALLOWIN'\nDeleting chain `ALLOWOUT'\nDeleting chain `CC_ALLOWP'\nDeleting chain `CC_ALLOWPORTS'\n[ ... ]\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#restart", "title": "Restart", "text": "<p><code>-r,  --restart</code></p> <p>Restart firewall rules (csf)</p> <pre><code>sudo csf -r\n</code></pre> restart <pre><code>Flushing chain `INPUT'\nFlushing chain `FORWARD'\nFlushing chain `OUTPUT'\nFlushing chain `ALLOWIN'\nFlushing chain `ALLOWOUT'\nFlushing chain `CC_ALLOWP'\nFlushing chain `CC_ALLOWPORTS'\n[ ... ]\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#quick-restart", "title": "Quick Restart", "text": "<p><code>-q,  --startq</code></p> <p>Quick restart (csf restarted by lfd)</p> <pre><code>sudo csf -q\n</code></pre> startq <pre><code>lfd will restart csf within the next 5 seconds\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#force-restart", "title": "Force Restart", "text": "<p><code>-sf, --startf</code></p> <p>Force CLI restart regardless of LFDSTART setting</p> <pre><code>sudo csf -sf\n</code></pre> startf <pre><code>Flushing chain `INPUT'\nFlushing chain `FORWARD'\nFlushing chain `OUTPUT'\nFlushing chain `ALLOWIN'\nFlushing chain `ALLOWOUT'\nFlushing chain `CC_ALLOWP'\nFlushing chain `CC_ALLOWPORTS'\n[ ... ]\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#restart-all", "title": "Restart All", "text": "<p><code>-ra, --restartall</code></p> <p>Restart firewall rules (csf) and then restart lfd daemon. Both csf and then lfd should be restarted after making    any  changes  to the configuration files</p> <pre><code>sudo csf -ra\n</code></pre> restartall <pre><code>Flushing chain `INPUT'\nFlushing chain `FORWARD'\nFlushing chain `OUTPUT'\nFlushing chain `ALLOWIN'\nFlushing chain `ALLOWOUT'\nFlushing chain `CC_ALLOWP'\nFlushing chain `CC_ALLOWPORTS'\n[ ... ]\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#cluster-restart", "title": "Cluster Restart", "text": "<p><code>-crs, --crestart</code></p> <p>Cluster restart csf and lfd</p> <pre><code>sudo csf -crs\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#manage-lfd-daemon", "title": "Manage Lfd Daemon", "text": "<p><code>--lfd [stop|start|restart|status]</code></p> <p>Actions to take with the lfd daemon</p> <pre><code>sudo csf --lfd stop\nsudo csf --lfd start\nsudo csf --lfd restart\nsudo csf --lfd status\n</code></pre> stopstartrestartstatus <pre><code>No output\n</code></pre> <pre><code>No output\n</code></pre> <pre><code>\u25cf lfd.service - ConfigServer Firewall &amp; Security - lfd\n    Loaded: loaded (/lib/systemd/system/lfd.service; enabled; preset: enabled)\n    Active: active (running) since 15ms ago\n    Process: 3769 ExecStart=/usr/sbin/lfd (code=exited, status=0/SUCCESS)\n  Main PID: 3782 (lfd - starting)\n      Tasks: 1 (limit: 4613)\n    Memory: 38.7M\n        CPU: 366ms\n    CGroup: /system.slice/lfd.service\n            \u251c\u25003782 \"lfd - starting\"\n            \u2514\u25003784 \"lfd - starting\"\n\nsystemd[1]: Starting lfd.service - ConfigServer Firewall &amp; Security - lfd...\nsystemd[1]: Started lfd.service - ConfigServer Firewall &amp; Security - lfd.\n</code></pre> <pre><code>\u25cf lfd.service - ConfigServer Firewall &amp; Security - lfd\n    Loaded: loaded (/lib/systemd/system/lfd.service; enabled; preset: enabled)\n    Active: active (running) since 1min 3s ago\n    Process: 3769 ExecStart=/usr/sbin/lfd (code=exited, status=0/SUCCESS)\n  Main PID: 3782 (lfd - sleeping)\n      Tasks: 2 (limit: 4613)\n    Memory: 45.2M\n        CPU: 9.476s\n    CGroup: /system.slice/lfd.service\n            \u251c\u25003782 \"lfd - sleeping\"\n            \u2514\u25003791 \"lfd UI\"\n\nsystemd[1]: Starting lfd.service - ConfigServer Firewall &amp; Security - lfd...\nsystemd[1]: Started lfd.service - ConfigServer Firewall &amp; Security - lfd.\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#check-for-updates", "title": "Check for Updates", "text": "<p><code>-c,  --check</code></p> <p>Check for updates to csf but do not upgrade</p> <pre><code>sudo csf -c\n</code></pre> Output <pre><code>csf is already at the latest version: v14.20\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#update", "title": "Update", "text": "<p><code>-u,  --update</code></p> <p>Check for updates to csf and upgrade if available</p> <pre><code>sudo csf -u\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#update-force", "title": "Update (Force)", "text": "<p><code>-uf</code></p> <p>Force an update of csf whether and upgrade is required or not</p> <pre><code>sudo csf -uf\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#version", "title": "Version", "text": "<p><code>-v,  --version</code></p> <p>Show csf version</p> <pre><code>sudo csf -v\n</code></pre> Output <pre><code>csf: v14.20 (generic)\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#list-firewall-rules-ipv4", "title": "List Firewall Rules (IPv4)", "text": "<p><code>-l,  --status</code></p> <p>List/Show the IPv4 iptables configuration</p> <pre><code>sudo csf -l\n</code></pre> Output <pre><code>iptables filter table\n=====================\nChain INPUT (policy DROP 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1       33  2492 ACCEPT     udp  --  *      *       0.0.0.0/0            0.0.0.0/0            multiport dports 4000,5353\n2      758 55610 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            multiport dports 4000\n3        0     0 ACCEPT     udp  --  *      *       0.0.0.0/0            0.0.0.0/0            multiport dports 5353\n4    5209K   28G LOCALINPUT  all  --  !lo    *       0.0.0.0/0            0.0.0.0/0           \n13       3   180 ACCEPT     tcp  --  !lo    *       0.0.0.0/0            0.0.0.0/0            ctstate NEW tcp dpt:22\n14     998 56956 ACCEPT     tcp  --  !lo    *       0.0.0.0/0            0.0.0.0/0            ctstate NEW tcp dpt:25\n15     123  5612 ACCEPT     tcp  --  !lo    *       0.0.0.0/0            0.0.0.0/0            ctstate NEW tcp dpt:53\n16      16   680 ACCEPT     tcp  --  !lo    *       0.0.0.0/0            0.0.0.0/0            ctstate NEW tcp dpt:853\n17       2   100 ACCEPT     tcp  --  !lo    *       0.0.0.0/0            0.0.0.0/0            ctstate NEW tcp dpt:80\n18      74  3148 ACCEPT     tcp  --  !lo    *       0.0.0.0/0            0.0.0.0/0            ctstate NEW tcp dpt:110\n19     125  5624 ACCEPT     tcp  --  !lo    *       0.0.0.0/0            0.0.0.0/0            ctstate NEW tcp dpt:143\n</code></pre> <p></p> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#list-firewall-rules-ipv6", "title": "List Firewall Rules (IPv6)", "text": "<p><code>-l6, --status6</code></p> <p>List/Show the IPv6 ip6tables configuration</p> <pre><code>sudo csf -l6\n</code></pre> Output <pre><code>ip6tables filter table\n======================\nChain INPUT (policy DROP 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n8        0     0 ACCEPT     all      !lo    *       ::/0                 ::/0                 ctstate RELATED,ESTABLISHED\n9        0     0 ACCEPT     tcp      !lo    *       ::/0                 ::/0                 ctstate NEW tcp dpt:20\n10       0     0 ACCEPT     tcp      !lo    *       ::/0                 ::/0                 ctstate NEW tcp dpt:21\n11       0     0 ACCEPT     tcp      !lo    *       ::/0                 ::/0                 ctstate NEW tcp dpt:22\n12       0     0 ACCEPT     tcp      !lo    *       ::/0                 ::/0                 ctstate NEW tcp dpt:25\n13       0     0 ACCEPT     tcp      !lo    *       ::/0                 ::/0                 ctstate NEW tcp dpt:53\n14       0     0 ACCEPT     tcp      !lo    *       ::/0                 ::/0                 ctstate NEW tcp dpt:853\n15       0     0 ACCEPT     tcp      !lo    *       ::/0                 ::/0                 ctstate NEW tcp dpt:80\n16       0     0 ACCEPT     tcp      !lo    *       ::/0                 ::/0                 ctstate NEW tcp dpt:110\n17       0     0 ACCEPT     tcp      !lo    *       ::/0                 ::/0                 ctstate NEW tcp dpt:143\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#add-ip-to-allow-list", "title": "Add IP to Allow List", "text": "<p><code>-a,  --add ip [comment]</code></p> <p>Allow an IP and add to <code>/etc/csf/csf.allow</code></p> <pre><code>sudo csf -a &lt;IP_ADDRESS&gt;\nsudo csf -a 142.250.189.142\n</code></pre> Output <pre><code>Adding 142.250.189.142 to csf.allow and iptables ACCEPT...\ncsf: IPSET adding [142.250.189.142] to set [chain_ALLOW]\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#remove-ip-to-allow-list", "title": "Remove IP to Allow List", "text": "<p><code>-ar, --addrm ip</code></p> <p>Remove an IP from <code>/etc/csf/csf.allow</code> and delete rule</p> <pre><code>sudo csf -ar &lt;IP_ADDRESS&gt;\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#add-ip-to-deny-list", "title": "Add IP to Deny List", "text": "<p><code>-d,  --deny ip [comment]</code></p> <p>Deny an IP and add to <code>/etc/csf/csf.deny</code></p> <pre><code>sudo csf -d &lt;IP_ADDRESS&gt;\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#remove-ip-from-deny-list", "title": "Remove IP from Deny List", "text": "<p><code>-dr, --denyrm ip</code></p> <p>Unblock an IP and remove from <code>/etc/csf/csf.deny</code></p> <pre><code>sudo csf -dr &lt;IP_ADDRESS&gt;\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#remove-all-ips-from-deny-list", "title": "Remove All IPs from Deny List", "text": "<p><code>-df, --denyf</code></p> <p>Remove and unblock all entries in <code>/etc/csf/csf.deny</code></p> <pre><code>sudo csf -df\n</code></pre> Output <pre><code>csf: all entries removed from csf.deny\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#grep-search-for-ip", "title": "Grep Search for IP", "text": "<p><code>-g,  --grep ip</code></p> <p>Search the iptables and ip6tables rules for a match (e.g. IP, CIDR, Port Number)</p> <pre><code>sudo csf -g &lt;STRING&gt;\nsudo csf -g 22\nsudo csf -g ACCEPT\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#lookup-ip", "title": "Lookup IP", "text": "<p><code>-i,  --iplookup ip</code></p> <p>Lookup IP address geographical information using CC_LOOKUPS setting in <code>/etc/csf/csf.conf</code></p> <pre><code>sudo csf -i &lt;IP_ADDRESS&gt;\nsudo csf -i 142.250.189.142\n</code></pre> Output <pre><code>142.250.189.142 (US/United States/mia09s26-in-f14.1e100.net)\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#view-temp-allowban-list", "title": "View Temp Allow/Ban List", "text": "<p><code>-t,  --temp</code></p> <p>Displays the current list of temporary allow and deny IP entries with their TTL and comment</p> <pre><code>sudo csf -t\n</code></pre> Output <pre><code>A/D   IP address          Port    Dir     Time To Live     Comment\nALLOW 142.250.189.142     *       inout   58m 56s          Manually added: 142.250.189.142 (US/United States/mia09s26-in-f14.1e100.net)\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#remove-temp-allowban-ip", "title": "Remove Temp Allow/Ban IP", "text": "<p><code>-tr, --temprm ip</code></p> <p>Remove an IP from the temporary IP ban or allow list</p> <pre><code>sudo csf -tr &lt;IP_ADDRESS&gt;\nsudo csf -tr 142.250.189.142\n</code></pre> Output <pre><code>ACCEPT  all opt -- in !lo out *  142.250.189.142  -&gt; 0.0.0.0/0  \nACCEPT  all opt -- in * out !lo  0.0.0.0/0  -&gt; 142.250.189.142  \ncsf: 142.250.189.142 temporary allow removed\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#remove-temp-ban-ip", "title": "Remove Temp Ban IP", "text": "<p><code>-trd, --temprmd ip</code></p> <p>Remove an IP from the temporary IP ban list only</p> <pre><code>sudo csf -trd &lt;IP_ADDRESS&gt;\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#remove-temp-allow-ip", "title": "Remove Temp Allow IP", "text": "<p><code>-tra, --temprma ip</code></p> <p>Remove an IP from the temporary IP allow list only</p> <pre><code>sudo csf -tra &lt;IP_ADDRESS&gt;\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#add-temp-block-ip", "title": "Add Temp Block IP", "text": "<p><code>-td, --tempdeny ip ttl [-p port] [-d direction] [comment]</code></p> <p>Add an IP to the temp IP ban list. ttl is how long to blocks for (default:seconds, can use one suffix of h/m/d). Optional port. Optional direction of block can be one of: in, out or inout (default:in)</p> <pre><code>sudo csf -td &lt;IP_ADDRESS&gt;\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#add-temp-allow-ip", "title": "Add Temp Allow IP", "text": "<p><code>-ta, --tempallow ip ttl [-p port] [-d direction] [comment]</code></p> <p>Add an IP to the temp IP allow list (default:inout)</p> <pre><code>sudo csf -ta &lt;IP_ADDRESS&gt;\nsudo csf -ta 142.250.189.142\n</code></pre> Output <pre><code>ACCEPT  all opt -- in !lo out *  142.250.189.142  -&gt; 0.0.0.0/0  \nACCEPT  all opt -- in * out !lo  0.0.0.0/0  -&gt; 142.250.189.142\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#flush-all-temp-ip-entries", "title": "Flush All Temp IP Entries", "text": "<p><code>-tf, --tempf</code></p> <p>Flush all IPs from the temporary IP entries</p> <pre><code>sudo csf -tf\n</code></pre> Output <pre><code>csf: There are no temporary IP bans\nACCEPT  all opt -- in !lo out *  142.250.189.142  -&gt; 0.0.0.0/0  \nACCEPT  all opt -- in * out !lo  0.0.0.0/0  -&gt; 142.250.189.142  \ncsf: 142.250.189.142 temporary allow removed\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#initiate-lfd-log-scanner", "title": "Initiate Lfd Log Scanner", "text": "<p><code>-lr, --logrun</code></p> <p>Initiate Log Scanner report via lfd</p> <pre><code>sudo csf -lr\n</code></pre> <p></p> <p>If you receive the following error in console:</p> Output <pre><code>Option LOGSCANNER needs to be enabled in csf.conf for this feature\n</code></pre> <p></p> <p>Open your <code>csf.conf</code> configuration file, locate the setting <code>LOGSCANNER</code>, and change the value to <code>1</code>:</p> <pre><code>###############################################################################\n# SECTION:Log Scanner\n###############################################################################\n# Log Scanner. This feature will send out an email summary of the log lines of\n# each log listed in /etc/csf/csf.logfiles. All lines will be reported unless\n# they match a regular expression in /etc/csf/csf.logignore\n#\n# File globbing is supported for logs listed in /etc/csf/csf.logfiles. However,\n# be aware that the more files lfd has to track, the greater the performance\n# hit. Note: File globs are only evaluated when lfd is started\n#\n# Note: lfd builds the report continuously from lines logged after lfd has\n# started, so any lines logged when lfd is not running will not be reported\n# (e.g. during reboot). If lfd is restarted, then the report will include any\n# lines logged during the previous lfd logging period that weren't reported\n#\n# 1 to enable, 0 to disable\nLOGSCANNER = \"0\"\n</code></pre> <p></p> <p>Then go back to console and re-run the command.</p> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#view-ports", "title": "View Ports", "text": "<p><code>-p, --ports</code></p> <p>View ports on the server that have a running process behind them listening for external connections</p> <pre><code>sudo csf -p\n</code></pre> Output <pre><code>Ports listening for external connections and the executables running behind them:\nPort/Proto Open Conn  PID/User             Command Line                         Executable\n631/tcp    -/-  -     (1090/root)          /usr/sbin/cupsd -l                   /usr/sbin/cupsd\n8546/tcp   4/6  -     (4627/root)          lfd UI                               /usr/bin/perl\n5353/udp   -/-  -     (337/systemd-resolve /lib/systemd/systemd-resolved        /usr/lib/systemd/systemd-resolved\n5353/udp   -/-  -     (702/avahi)          avahi-daemon: running [local]        /usr/sbin/avahi-daemon\n40857/udp  -/-  -     (702/avahi)          avahi-daemon: running [local]        /usr/sbin/avahi-daemon\n49833/udp  -/-  -     (702/avahi)          avahi-daemon: running [local]        /usr/sbin/avahi-daemon\n</code></pre> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/commands/#view-graphs", "title": "View Graphs", "text": "<p><code>--graphs [graph type] [directory]</code></p> <p>Generate System Statistics html pages and images for a given graph type into a given directory. See ST_SYSTEM for requirements</p> <code>[graph type]</code> <ul> <li>disk</li> <li>apachework</li> <li>mysqlslowqueries</li> <li>cpu</li> <li>load</li> <li>mysqlconns</li> <li>net</li> <li>diskw</li> <li>apachecpu</li> <li>email</li> <li>temp</li> <li>apacheconn</li> <li>mysqlqueries</li> <li>mem</li> <li>mysqldata</li> </ul> <pre><code>sudo csf --graphs &lt;GRAPH_TYPE&gt; &lt;SAVE_PATH&gt;\nsudo csf --graphs mem /home/$USER/graphs\n</code></pre> <p></p> <p>If you run the above command and see the error:</p> Output <pre><code>ST_SYSTEM is disabled\n</code></pre> <p></p> <p>Open your <code>csf.conf</code> configuration file, locate the setting <code>ST_SYSTEM</code>, and change the value to <code>1</code>:</p> <pre><code># This option will gather basic system statstics. Through the UI it displays\n# various graphs for disk, cpu, memory, network, etc usage over 4 intervals:\n#  . Hourly (per minute)\n#  . 24 hours (per minute)\n#  . 7 days (per minute averaged over an hour)\n#  . 30 days (per minute averaged over an hour) - user definable\n# The data is stored in /var/lib/csf/stats/system and the option requires the\n# perl GD::Graph module\n#\n# Note: Disk graphs do not show on Virtuozzo/OpenVZ servers as the kernel on\n# those systems do not store the required information in /proc/diskstats\n# On new installations or when enabling this option it will take time for these\n# graphs to be populated\nST_SYSTEM = \"0\"\n</code></pre> <p></p> <p>If you receive the error:</p> Output <pre><code>Perl module GD::Graph is not installed/working\n</code></pre> <p></p> <p>Install the package <code>libgd-graph-perl</code>: </p><pre><code>sudo apt-get install libgd-graph-perl\n</code></pre><p></p> <p></p> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/conf/", "title": "Configure: Basics", "text": "", "tags": ["configure"]}, {"location": "cheatsheet/conf/#configure-csfconf", "title": "Configure: csf.conf", "text": "<p>Two versions of the config file have been provided below. A full version which contains comments, and a clean version which contains no comments and only the config settings. </p> <p>You may copy the contents, and place it within your server under the path <code>/etc/csf/csf.conf</code>.</p> <p></p> <ul> <li>Full Version</li> <li>Clean Version</li> </ul> <p></p> <p>After you have set your config file to its desired values; you must restart the CSF service to apply the configurations. Open Terminal and run:</p> <pre><code>sudo csf -r\n</code></pre> <p>You can also restart both CSF and LFD services with <code>-ra, --restartall</code> </p><pre><code>sudo csf -ra\n</code></pre><p></p> <p></p> <p></p>", "tags": ["configure"]}, {"location": "cheatsheet/conf/#full-version", "title": "Full Version", "text": "", "tags": ["configure"]}, {"location": "cheatsheet/conf/#clean-version", "title": "Clean Version", "text": "", "tags": ["configure"]}, {"location": "cheatsheet/structure/", "title": "Cheatsheet: File & Folder Structure", "text": "", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/structure/#cheatsheet-file-folder-structure", "title": "Cheatsheet: File &amp; Folder Structure", "text": "<p>When installing, configuring, and running CSF; it is helpful to know where files and folders are stored within your system, and what their purpose is. A list of these files and folders used by CSF are provided below:</p> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/structure/#directory-structure", "title": "Directory Structure", "text": "<p>Directories associated with ConfigServer Filewall which house all of the files used to configure and manage CSF.</p> Folder Description <code>/etc/csf/</code> configuration files <code>/var/lib/csf/</code> temporary data files <code>/usr/local/csf/bin/</code> scripts <code>/usr/local/csf/lib/</code> perl modules and static data <code>/usr/local/csf/tpl/</code> email alert templates <p></p> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/structure/#file-structure", "title": "File Structure", "text": "<p>Files associated with ConfigServer Firewall configuration and management.</p> File Description <code>/etc/csf/csf.conf</code> The main configuration file. <code>/etc/csf/csf.allow</code> A list of IP's and CIDR addresses that should always be allowed through the firewall. <code>/etc/csf/csf.deny</code> A list of IP's and CIDR addresses that should never be allowed through the firewall. <code>/etc/csf/csf.ignore</code> A list of IP's and CIDR addresses that the login failure daemon should ignore and not not block if detected. <code>/etc/csf/csf.*ignore</code> Various ignore files that list files, users, IP's that the login failure daemon should ignore. <code>/lib/systemd/system/lfd.service</code> Service file for lfd (ConfigServer Firewall) <code>/lib/systemd/system/csf.service</code> Service file for csf (Login Failure Daemon) <p></p> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/structure/#patcher-files", "title": "Patcher Files", "text": "<p>The following files are associated with the ConfigServer Firewall patcher which adds special iptable rules so that CSF can communicate with Docker &amp; OpenVPN.</p> File Description <code>/usr/local/csf/bin/csfpre.sh</code> Patcher pre script. Runs before CSF configures iptables <code>/usr/local/csf/bin/csfpost.sh</code> Patcher post script. Runs after CSF configures iptables <code>/usr/local/include/csf/post.d/docker.sh</code> Docker patch for CSF which adds firewall rules for Docker and CSF <code>/usr/local/include/csf/post.d/openvpn.sh</code> OpenVPN patch for CSF which adds firewall rules for OpenVPN and CSF <p></p> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/troubleshooting/", "title": "Cheatsheet: Troubleshooting", "text": "", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/troubleshooting/#cheatsheet-troubleshooting", "title": "Cheatsheet: Troubleshooting", "text": "<p>The information below is a list of errors you may receive within CSF, and steps on how to correct each issue.</p> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/troubleshooting/#cant-locate-object-method-new-via-package-cryptcbc-at-usrsbincsf-line", "title": "Can't locate object method \"new\" via package \"Crypt::CBC\" at /usr/sbin/csf line ***", "text": "<p>This error occurs when Crypt::CBC cannot be found. It is sometimes seen when executing commands such as <code>sudo csf -cp</code>.</p> <p></p> <p>To correct the issue, open the file <code>/usr/sbin/csf</code> in a text editor.</p> <p>Locate the lines: </p><pre><code>use ConfigServer::Sendmail;\nuse ConfigServer::LookUpIP qw(iplookup);\n</code></pre><p></p> <p>Add a new line with <code>use Crypt::CBC</code> as shown below: </p><pre><code>use ConfigServer::Sendmail;\nuse ConfigServer::LookUpIP qw(iplookup);\nuse Crypt::CBC\n</code></pre><p></p> <p></p> <p>Save the file, and re-execute your previous command which caused the error.</p> <p></p> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "cheatsheet/troubleshooting/#csf46313-open3-exec-of-sbinipset-flush-failed-no-such-file-or-directory-at-usrsbincsf-line", "title": "csf[46313]: open3: exec of /sbin/ipset flush failed: No such file or directory at /usr/sbin/csf line ****.", "text": "<p>This error occurs when you are missing the package <code>ipset</code>. Install it with the following commands:</p> <p></p> <p>Debian based systems:</p> <pre><code>sudo apt update\nsudo apt-get install ipset\n</code></pre> <p>Redhat based systems: </p><pre><code>sudo yum check-update\nsudo yum install ipset\n</code></pre><p></p> <p></p> <p></p>", "tags": ["cheatsheet", "configure"]}, {"location": "csf/configure/", "title": "Configure & Startup", "text": "", "tags": ["configure"]}, {"location": "csf/configure/#configure-startup", "title": "Configure &amp; Startup", "text": "<p>After you have installed ConfigServer Firewall in the previous chapter; you can start configuring it to suit your server\u2019s requirements.</p> <p></p>", "tags": ["configure"]}, {"location": "csf/configure/#configure", "title": "Configure", "text": "<p>The main configuration file for CSF is located at <code>/etc/csf/csf.conf</code>. You can use your preferred text editor to modify the file, such as nano or vim:</p> <pre><code>sudo nano /etc/csf/csf.conf\n</code></pre> <p></p> <p>The list below outlines just a few of the important settings that you can modify within ConfigServer Firewall.</p> <p>Patcher Note</p> <p>When you run the patcher <code>install.sh</code>; TESTING MODE will automatically be disabled after the script has successfully completed.</p> <ul> <li><code>TESTING</code>: Set this value to 0 to disable testing mode and activate the firewall.</li> <li><code>TCP_IN</code> and <code>TCP_OUT</code>: These settings define the allowed incoming and outgoing TCP ports, respectively. Add or remove ports as required, separated by commas.</li> <li><code>UDP_IN</code> and <code>UDP_OUT</code>: These settings define the allowed incoming and outgoing UDP ports, respectively. Add or remove ports as required, separated by commas.</li> <li><code>DENY_IP_LIMIT</code>: This setting defines the maximum number of IP addresses that can be listed in the /etc/csf/csf.deny file. Adjust this limit as needed.</li> <li><code>CT_LIMIT</code>: This setting controls the number of connections from a single IP address that are allowed before the IP is temporarily blocked. Adjust this value according to your server\u2019s requirements.</li> </ul> <p></p> <p>Make sure to review the configuration file and adjust the settings to suit your server\u2019s needs. After making changes to the configuration file, save and exit the text editor.</p> <p>Two csf.conf configuration files have been provided as examples; a full version, and clean (uncommented) version, and can be viewed on the csf.conf page.</p> <p></p> <p></p>", "tags": ["configure"]}, {"location": "csf/configure/#start-configserver", "title": "Start ConfigServer", "text": "<p>After you have set your config file to its desired values; you can now start up or restart the CSF service to apply the configurations. Open Terminal and run:</p> <p></p>", "tags": ["configure"]}, {"location": "csf/configure/#enable", "title": "Enable", "text": "<p><code>-e,  --enable</code></p> <p>Enable csf and lfd if previously disabled</p> <pre><code>sudo csf -e\n</code></pre> <p></p>", "tags": ["configure"]}, {"location": "csf/configure/#start", "title": "Start", "text": "<p><code>-s,  --start</code></p> <p>Starts the firewall and applies any rules that have been configured at startup.</p> <pre><code>sudo csf -s\n</code></pre> <p></p>", "tags": ["configure"]}, {"location": "csf/configure/#restart", "title": "Restart", "text": "<p><code>-r,  --restart</code></p> <p>Restart firewall rules (csf)</p> <pre><code>sudo csf -r\n</code></pre> <p></p> <p>A full list of CSF commands have been provided in our Cheatsheet: Commands section.</p> <p></p> <p></p>", "tags": ["configure"]}, {"location": "csf/configure/#next-steps", "title": "Next Steps", "text": "Next: Installing the Admin WebUI Instructions for installing the CSF Admin Web Interface ../webui ../webui", "tags": ["configure"]}, {"location": "csf/install/", "title": "Install CSF", "text": "", "tags": ["install"]}, {"location": "csf/install/#install-csf", "title": "Install CSF", "text": "<p>These steps explain how to install ConfigServer Firewall on your system. There are two possible ways to install CSF which are listed below: </p> <ul> <li>Install: Using Patch</li> <li>Install: Manually</li> </ul> <p></p> <p>The Patch method attempts to take much of the work out of installing CSF. It installs all prerequisites automatically, and sets CSF to start with <code>TESTING MODE</code> disabled. After CSF is installed using the patcher; then the Docker and OpenVPN patches will automatically be installed next.</p> <p>The Manual method requires you to manually install all prerequisites using your OS package manager, and then manually downloading the latest copy of CSF and extracting / installing it on your system. You will have to run the patcher after you have installed CSF.</p> <p></p> <p></p>", "tags": ["install"]}, {"location": "csf/install/#install-using-patch", "title": "Install: Using Patch", "text": "<p>If you would like to install ConfigServer Firewall using this repo's patcher; download the patch: </p><pre><code>git clone https://github.com/Aetherinox/csf-firewall.git\n</code></pre><p></p> <p></p> <p>Set the permissions for the <code>install.sh</code> file: </p><pre><code>sudo chmod +x /csf-firewall/patch/install.sh\n</code></pre><p></p> <p></p> <p>Run the script: </p><pre><code>sudo ./csf-firewall/patch/install.sh\n</code></pre><p></p> <p></p> <p>If ConfigServer Firewall is not already installed on your system; you should see: </p><pre><code>  Installing package iptables\n  Installing package ipset\n  Installing package ConfigServer Firewall\n\n  Patch installer will now start ...\n</code></pre><p></p> <p></p> <p>After the patcher has installed CSF; it will then automatically install the Docker and OpenVPN patches. All you will need to do after; is ensure CSF is up and running.</p> <p>Please proceed to the section Configure &amp; Start CSF</p> <p></p> <p></p>", "tags": ["install"]}, {"location": "csf/install/#install-manually", "title": "Install: Manually", "text": "", "tags": ["install"]}, {"location": "csf/install/#prerequisites", "title": "Prerequisites", "text": "<ul> <li>A Linux server running CentOS, Debian, Ubuntu, or any other compatible Linux distribution. </li> <li>Root access or a user account with sudo privileges.</li> <li>Perl installed on your server. If Perl is not installed, you can install it by running the following commands:</li> <li> <p>For CentOS/RHEL:     </p><pre><code>sudo yum install perl ipset\n</code></pre><p></p> </li> <li> <p>For Debian/Ubuntu:</p> <pre><code>sudo apt-get update \nsudo apt-get install perl ipset\n</code></pre> </li> </ul> <p></p>", "tags": ["install"]}, {"location": "csf/install/#download-and-install-csf", "title": "Download and Install CSF", "text": "<p>To download and install CSF, follow these steps:</p> <ul> <li>Log in to your server via SSH. </li> <li>Download the latest version of CSF using the wget command:     <pre><code>wget https://download.configserver.com/csf.tgz\n</code></pre></li> <li>Extract the downloaded archive:     <pre><code>tar -xzf csf.tgz\n</code></pre></li> <li>Navigate to the extracted directory:     <pre><code>cd csf\n</code></pre></li> <li>Run the installation script:     <pre><code>sudo sh install.sh\n</code></pre></li> </ul> <p></p> <p>CSF will now be installed on your server, along with its Web UI (ConfigServer Firewall &amp; Security) if you have a control panel like cPanel or DirectAdmin installed.</p> <p></p> <p></p>", "tags": ["install"]}, {"location": "csf/install/#next-steps", "title": "Next Steps", "text": "Next: How to Configure &amp; Start CSF Instructions for editing the CSF config file and starting CSF for the first time ../configure ../configure", "tags": ["install"]}, {"location": "csf/testing/", "title": "Install CSF > Testing", "text": "", "tags": ["install"]}, {"location": "csf/testing/#install-csf-testing", "title": "Install CSF: Testing", "text": "<p>Before enabling and configuring CSF, it is crucial to test whether it is compatible with your server. Run the following command to initiate the test:</p> <pre><code>sudo perl /usr/local/csf/bin/csftest.pl\n</code></pre> <p></p> <p>The test will check for any potential issues or conflicts. If the test completes successfully, you will see the message:</p> Console<pre><code>\u201cRESULT: csf should function on this server.\u201d\n</code></pre> <p></p> <p>If there are any problems, the test will provide information on how to resolve them.</p> <p></p> <p></p>", "tags": ["install"]}, {"location": "csf/uninstall/", "title": "Uninstall CSF", "text": "", "tags": ["install"]}, {"location": "csf/uninstall/#uninstall-csf", "title": "Uninstall CSF", "text": "<p>If you decide to uninstall CSF for any reason, follow these steps:</p> <ol> <li>Navigate to the CSF directory:     <pre><code>cd /etc/csf\n</code></pre></li> <li>Run the uninstallation script:     <pre><code>sudo sh uninstall.sh\n</code></pre></li> </ol> <p></p> <p>The script will remove CSF and its associated files from your server.</p> <p></p> <p></p>", "tags": ["install"]}, {"location": "csf/webui/", "title": "Install WebUI", "text": "", "tags": ["install"]}, {"location": "csf/webui/#install-webui", "title": "Install WebUI", "text": "<p>ConfigServer Firewall offers a WebUI for the managing firewall from the web interface. This section explains how to install the WebUI.</p> <p></p>", "tags": ["install"]}, {"location": "csf/webui/#step-1-install-required-perl-modules", "title": "Step 1: Install Required Perl Modules:", "text": "<p>The CSF WebUI requires a few Perl modules to be installed on your system. Use the following commands to install the required modules as per your operating system.</p> <p></p> <p>Debian based systems: </p><pre><code>sudo apt-get install libio-socket-ssl-perl libcrypt-ssleay-perl \\\n                    libnet-libidn-perl libio-socket-inet6-perl libsocket6-perl\n</code></pre><p></p> <p></p> <p>Redhat based systems: </p><pre><code>sudo yum install perl-IO-Socket-SSL.noarch perl-Net-SSLeay perl-Net-LibIDN \\\n               perl-IO-Socket-INET6 perl-Socket6\n</code></pre><p></p> <p></p>", "tags": ["install"]}, {"location": "csf/webui/#step-2-enable-csf-firewall-web-ui", "title": "Step 2: Enable CSF Firewall Web UI:", "text": "<p>To enable CSF web UI edit /etc/csf/csf.conf file in your favorite text editor and update the following values.</p> <pre><code>sudo vim /etc/csf/csf.conf\n</code></pre> <pre><code># 1 to enable, 0 to disable web ui \nUI = \"1\"\n\n# Set port for web UI. The default port is 6666, but\n# I change this to 1025 to easy access. Default port create some issue\n# with popular chrome and firefox browser (in my case) \n\nUI_PORT = \"1025\"\n\n# Leave blank to bind to all IP addresses on the server \nUI_IP = \"\"\n\n# Set username for authetnication \nUI_USER = \"admin\"\n\n# Set a strong password for authetnication \nUI_PASS = \"admin\"\n</code></pre> <p></p> <p>Change the following values to your own:</p> <ul> <li><code>UI_PORT</code></li> <li><code>UI_USER</code></li> <li><code>UI_PASS</code></li> </ul> <p></p> <p>After making changes, edit <code>/etc/csf/ui/ui.allow</code> configuration file and add your public IP to allow access to CSF UI. Change <code>YOUR_PUBLIC_IP_ADDRESS</code> with your public IP address.</p> <pre><code>sudo echo \"YOUR_PUBLIC_IP_ADDRESS\" &gt;&gt;  /etc/csf/ui/ui.allow\n</code></pre> <p></p> <p>Web UI works under lfd daemon. So restart the lfd daemon on your system using the following command.</p> <pre><code>sudo service lfd restart\n</code></pre> <p></p> <p>In order to gain access to the online admin panel; you must ensure lfd and csf are running. You can check by running the command:</p> <pre><code>sudo service lfd status\n</code></pre> <p></p> <p>You should see the <code>lfd</code> service running:</p> <pre><code>\u25cf lfd.service - ConfigServer Firewall &amp; Security - lfd\n     Loaded: loaded (/lib/systemd/system/lfd.service; enabled; preset: enabled)\n     Active: active (running) since Mon 2024-08-05 11:59:38 MST; 1s ago\n    Process: 46393 ExecStart=/usr/sbin/lfd (code=exited, status=0/SUCCESS)\n   Main PID: 46407 (lfd - sleeping)\n      Tasks: 8 (limit: 4613)\n     Memory: 121.7M\n        CPU: 2.180s\n     CGroup: /system.slice/lfd.service\n</code></pre> <p></p> <p>Next, confirm <code>csf</code> service is also running:</p> <pre><code>sudo service csf status\n</code></pre> <p></p> <p>Check the output for errors on service <code>csf</code>. You should see no errors:</p> <pre><code>\u25cf csf.service - ConfigServer Firewall &amp; Security - csf\n     Loaded: loaded (/lib/systemd/system/csf.service; enabled; preset: enabled)\n     Active: active (exited) since Mon 2024-08-05 12:04:09 MST; 1s ago\n    Process: 46916 ExecStart=/usr/sbin/csf --initup (code=exited, status=0/SUCCESS)\n   Main PID: 46916 (code=exited, status=0/SUCCESS)\n        CPU: 12.692s\n</code></pre> <p></p> <p>If you see the following error when running <code>csf status</code>:</p> <pre><code>csf[46313]: open3: exec of /sbin/ipset flush failed: No such file or directory at /usr/sbin/csf line 5650.\n</code></pre> <p></p> <p>You must install <code>ipset</code>:</p> <pre><code>sudo apt-get update \nsudo apt-get install ipset\n</code></pre> <p></p>", "tags": ["install"]}, {"location": "csf/webui/#step-3-access-and-use-web-ui", "title": "Step 3: Access and Use Web UI:", "text": "<p>Now, access CSF UI on your browser with the specified port. For this tutorial; we used 1025 port and accessed the CSF admin panel by opening our browser and going to:</p> <pre><code>https://127.0.0.1:1025\n</code></pre> <p></p> <p>When prompted for the username and password; the default is:</p> Field Value Username <code>admin</code> Password <code>admin</code> <p></p> <p></p> <p></p> <p>After successful login, you will find the screen like below.</p> <p></p> <p></p> <p>Allow IP Address: You can use below option to allow any IP quickly. This action adds the entry to the <code>/etc/csf/csf.allow</code> file.</p> <p></p> <p></p> <p>Deny IP Address: You can use below option to deny any IP quickly. This action adds the entry to the <code>/etc/csf/csf.deny</code> file.</p> <p></p> <p></p> <p>Unblock IP Address: You can use below option to quickly unblocked any IP which is already blocked by CSF.</p> <p></p> <p></p> <p></p>", "tags": ["install"]}, {"location": "csf/tutorials/authentik/", "title": "CSF: Authentik Integration", "text": "", "tags": ["configure", "tutorials"]}, {"location": "csf/tutorials/authentik/#authentik-integration", "title": "Authentik Integration", "text": "<p>This section explains how to add Authentik as a middleware through Traefik so that you can secure the ConfigServer WebUI behind an authentication server.</p> <p></p> <p>If you are adding Authentik as middleware in the steps above; the last thing you must do is log in to your Authentik admin panel and add a new Provider so that we can access the CSF WebUI via your domain.</p> <p></p> <p>Once you sign into the Authentik admin panel, go to the left-side navigation, select Applications -&gt; Providers. Then at the top of the new page, click Create.</p> <p></p> <p></p> <p></p> <p></p> <p>For the provider, select <code>Proxy Provider</code>.</p> <p></p> <p></p> <p></p> <p>Add the following provider values:</p> <ul> <li>Name: <code>CSF ForwardAuth</code></li> <li>Authentication Flow: <code>default-source-authentication (Welcome to authentik!)</code></li> <li>Authorization Flow: <code>default-provider-authorization-implicit-consent (Authorize Application)</code></li> </ul> <p></p> <p>Select Forward Auth (single application):</p> <ul> <li>External Host: <code>https://csf.domain.com</code></li> </ul> <p></p> <p></p> <p></p> <p>Once finished, click Create. Then on the left-side menu, select Applications -&gt; Applications. Then at the top of the new page, click Create.</p> <p></p> <p></p> <p></p> <p></p> <p>Add the following parameters:</p> <ul> <li>Name: <code>CSF (ConfigServer Firewall)</code></li> <li>Slug: <code>csf</code></li> <li>Group: <code>Administrative</code></li> <li>Provider: <code>CSF ForwardAuth</code></li> <li>Backchannel Providers: <code>None</code></li> <li>Policy Engine Mode: <code>any</code></li> </ul> <p></p> <p></p> <p></p> <p>Save, and then on the left-side menu, select Applications -&gt; Outposts:</p> <p></p> <p></p> <p></p> <p>Find your Outpost and edit it.</p> <p></p> <p></p> <p>Move <code>CSF (ConfigServer Firewall)</code> to the right side Selected Applications box.</p> <p></p> <p></p> <p></p> <p>You should be able to access <code>csf.domain.com</code> and be prompted now to authenticate with Authentik.</p> <p></p> <p></p>", "tags": ["configure", "tutorials"]}, {"location": "csf/tutorials/geographical/", "title": "CSF: Enable Geo Block", "text": "", "tags": ["configure", "tutorials"]}, {"location": "csf/tutorials/geographical/#enable-geographical-blocks", "title": "Enable Geographical Blocks", "text": "<p>Geographical blocks allow you to blacklist or whitelist an entire country from accessing your services from within ConfigServer Firewall. </p> <p></p>", "tags": ["configure", "tutorials"]}, {"location": "csf/tutorials/geographical/#getting-started", "title": "Getting Started", "text": "<p>CSF allows you to pick which service you want to use for geographical blocks. By default, CSF uses db-ip, but you have the option to pick any of the following:</p> <ul> <li>Maxmind</li> <li>db-ip, ipdeny, iptoasn</li> </ul> <p></p> <code>Maxmind</code> <p>This service is free, but it requires you to sign up for an account and  generate an API key in order to use the services. Some have reported that Maxmind databases are slightly more accurate than db-ip.</p> <p>If you choose this provider; you must fill out <code>MM_LICENSE_KEY</code> within the <code>csf.conf</code>.</p> <p>Advantages: This is a one stop shop for all of the databases required for these features. They provide a consistent dataset for blocking and reporting purposes</p> <p>Disadvantages: MaxMind require a license key to download their databases. This is free of charge, but requires the user to create an account on their website to generate the required key.</p> <code>db-ip, ipdeny, iptoasn</code> <p>Advantages: The ipdeny.com databases form CC blocking are better optimised and so are quicker to process and create fewer iptables entries. All of these databases are free to download without requiring login or key</p> <p>Disadvantages: Multiple sources mean that any one of the three could interrupt the provision of these features. It may also mean that there are inconsistences between them</p> <p></p> <p>Performance Impact</p> <p>If using MaxMind, be aware of how many countries you allow / deny from accessing your server. The more countries you add, the more rules that will be added to CSF. These rules will be loaded every time you start or restart CSF; and may cause CSF to take longer-than-normal times to boot.</p> <p></p> <p>To change which database is used for geo blocking; open your CSF's <code>csf.conf</code> config file and locate the setting <code>CC_SRC</code>. If you have the ConfigServer WebUI enabled; you can access these settings from the CSF Admin WebUI.</p> <pre><code>\n</code></pre> <p></p> <p></p>", "tags": ["configure", "tutorials"]}, {"location": "csf/tutorials/geographical/#using-maxmind", "title": "Using MaxMind", "text": "<p>To configure MaxMind as your specified geo service; you must go to their website and register an account.</p> <ul> <li>Register for MaxMind</li> </ul> <p></p> <p>Once you have your account, on the left side; select Manage License Keys.</p> <p></p> <p></p> <p>In the middle of the page, you should be able to generate a license key:</p> <p></p> <p></p> <p>After the license key is generated, you must go back to your <code>csf.conf</code> and add the License key to your config. If you are using the CSF WebUI:</p> <p></p> <p></p> <p>Next, you must install MaxMind's GeoIpUpdater utility which is what will download the IP address databases. This tool automatically updates GeoIP2 and GeoLite2 databases. The program connects to the MaxMind GeoIP Update server to check for new databases. If a new database is available, the program will download and install it.</p> <p>A full set of instructions can also be found at:</p> <ul> <li>Setting up GeoIpUpdate</li> </ul> <p></p> <p>Warning</p> <p>If you are using a firewall, you must have the DNS and HTTPS ports open.</p> <p></p> <p>First, install:</p> <pre><code>sudo add-apt-repository ppa:maxmind/ppa\nsudo apt update\nsudo apt install geoipupdate\n</code></pre> <p></p> <p>Once installed make sure you have a License key generated on the maxmind website, you will then need to create a new file in <code>/etc/</code>:</p> <pre><code>sudo touch /etc/GeoIP.conf\n</code></pre> <p></p> <p>Add the following code to your newly created <code>/etc/GeoIP.conf</code>. After you paste the code below; you must change the following values:</p> <ul> <li><code>AccountID</code></li> <li><code>LicenseKey</code></li> </ul> <pre><code>\n</code></pre> <p></p> <p>After you have created the above config; you need to launch the <code>geoipupdate</code> app. Multiple commands are provided below depending on if you want to specify where you placed your downloaded databases. A list of arguments are also provided. In our example, we are going to start <code>geoipupdate</code> and download the databases to the path <code>/var/lib/csf/Geo/</code>.</p> <p></p> Argument Description <code>-d</code>, <code>--database-directory</code> Install databases to a custom directory. This is optional. If provided, it overrides the <code>DatabaseDirectory</code> value from the configuration file and the <code>GEOIPUPDATE_DB_DIR</code> environment variable. <code>-f</code>, <code>--config-file</code> The configuration file to use. See <code>GeoIP.conf</code> and its documentation for more information. This is optional. It defaults to the environment variable <code>GEOIPUPDATE_CONF_FILE</code> if it is set, or CONFFILE otherwise. <code>--parallelism</code> Set the number of parallel database downloads. <code>-h</code>, <code>--help</code> Display help and exit. <code>--stack-trace</code> Show a stack trace on any error message. This is primarily useful for debugging. <code>-V</code>, <code>--version</code> Display version information and exit. <code>-v</code>, <code>--verbose</code> Enable verbose mode. Prints out the steps that <code>geoipupdate</code> takes. If provided, it overrides any <code>GEOIPUPDATE_VERBOSE</code> environment variable. <code>-o</code>, <code>--output</code> Output download/update results in JSON format. Start (Basic)Start (Custom Paths)Start (Verbose Logging) <pre><code>sudo geoipupdate\n</code></pre> <pre><code>sudo geoipupdate --database-directory /var/lib/csf/Geo/ --config-file /etc/GeoIP.conf\n</code></pre> <pre><code>sudo geoipupdate -v --database-directory /var/lib/csf/Geo/ --config-file /etc/GeoIP.conf\n</code></pre> <p></p> <p></p>", "tags": ["configure", "tutorials"]}, {"location": "csf/tutorials/geographical/#using-db-ip-ipdeny-iptoasn", "title": "Using db-ip, ipdeny, iptoasn", "text": "<p>This is the second option you can pick within CSF for Geographical blocking. When initially tried, it worked right out of box. It required no modifications, no packages to be installed, and no license keys.</p> <p></p> <p></p>", "tags": ["configure", "tutorials"]}, {"location": "csf/tutorials/geographical/#allow-deny-countries", "title": "Allow / Deny Countries", "text": "<p>After you've completed the steps above; you can now whitelist or blacklist specific countries from accessing your server and will be managed through your ConfigServer Firewall.</p> <p>Pick your preferred method:</p> <ul> <li>Manage countries using csf.conf</li> <li>Manage countries with ConfigServer WebUI</li> </ul> <p></p>", "tags": ["configure", "tutorials"]}, {"location": "csf/tutorials/geographical/#manage-with-csfconf", "title": "Manage with csf.conf", "text": "<p>Open up your <code>csf.conf</code> file in a text editor and locate the following settings:</p> <ul> <li><code>CC_DENY</code></li> <li><code>CC_ALLOW</code></li> </ul> <p></p> <pre><code>\n</code></pre> <p></p> <p>In our example, we will blacklist the country China, which uses the abbreviation <code>CN</code>. To do so; our config will look like the following:</p> <pre><code>CC_DENY = \"CN\"\nCC_ALLOW = \"\"\n</code></pre> <p></p> <p>To specify multiple countries; add a comma <code>,</code> delimiter between each country.</p> <pre><code>CC_DENY = \"CN\"\nCC_ALLOW = \"US,GB,DE\"\n</code></pre> <p></p> <p>Our rules above mean:</p> Setting Countries Description <code>CC_DENY</code> <code>China</code> Blacklisted countries: cannot access our server <code>CC_ALLOW</code> <code>United States</code> <code>Great Britain</code> <code>Germany</code> Whitelisted countries: can access our server <p></p>", "tags": ["configure", "tutorials"]}, {"location": "csf/tutorials/geographical/#manage-with-csf-webui", "title": "Manage with CSF WebUI", "text": "<p>Sign into the ConfigServer WebUI. </p> <p>Select the tab CSF, scroll down and select Firewall Configuration, and then in the top dropdown box in the middle of the page, select Country Code Lists and Settings.</p> <p></p> <p>We will add the following to each setting:</p> <pre><code>CC_DENY = \"CN\"\nCC_ALLOW = \"US,GB,DE\"\n</code></pre> <p></p> <p>Below is an animated gif showing the steps.</p> <p></p> <p></p> <p>Once you have modified your country values; scroll to the very bottom and press the Change button.</p> <p></p> <p></p>", "tags": ["configure", "tutorials"]}, {"location": "csf/tutorials/geographical/#restart-csf", "title": "Restart CSF", "text": "<p>After you have whitelisted / blacklisted your desired countries; give CSF a restart:</p> <p></p> <p><code>-ra, --restartall</code></p> <p>Restart firewall rules (csf) and then restart lfd daemon. Both csf and then lfd should be restarted after making any changes to the configuration files</p> <pre><code>sudo csf -ra\n</code></pre> <p></p> <p></p>", "tags": ["configure", "tutorials"]}, {"location": "csf/tutorials/traefik/", "title": "CSF: Traefik Integration", "text": "", "tags": ["configure", "tutorials"]}, {"location": "csf/tutorials/traefik/#traefik-integration", "title": "Traefik Integration", "text": "<p>This section explains how to integrate ConfigServer Firewall and Traefik so that you can access the CSF WebUI via your domain name, but restrict access to the server IP address and port.</p> <p></p> <p>Open <code>/etc/csf/csf.conf</code> and change <code>UI_IP</code>. This specifies the IP address that the CSF WebUI will bind to. By default, the value is empty and binds CSF's WebUI to all IPs on your server.</p> <p>Find:</p> <pre><code>UI_IP = \"\"\n</code></pre> <p></p> <p>Change the IP to your Docker network subnet. You MUST use the format below, which is <code>::IPv6:IPv4</code></p> <pre><code>UI_IP = \"::ffff:172.17.0.1\"\n</code></pre> <p></p> <p>The above change will ensure that your CSF WebUI is not accessible via your public IP address. We're going to allow access to it via your domain name, but add some Traefik middleware so that you must authenticate before you can access the WebUI.</p> <p></p> <p>Next, we can add CSF through Docker and Traefik so that it's accessible via <code>csf.domain.com</code>. Open up your Traefik's <code>dynamic.yml</code> and add the following:</p> dynamic.yml (routers)dynamic.yml (middleware) <pre><code>http:\n  routers:\n    csf-http:\n      service: \"csf\"\n      rule: \"Host(`csf.domain.com`)\"\n      entryPoints:\n        - \"http\"\n      middlewares:\n        - https-redirect@file\n\n    csf-https:\n      service: \"csf\"\n      rule: \"Host(`csf.domain.com`)\"\n      entryPoints:\n        - \"https\"\n      middlewares:\n        - authentik@file\n        - whitelist@file\n        - geoblock@file\n      tls:\n        certResolver: cloudflare\n        domains:\n          - main: \"domain.com\"\n            sans:\n              - \"*.domain.com\"\n</code></pre> <pre><code>http:\n  middlewares:\n    authentik:\n      forwardauth:\n        address: http://authentik-server:9000/outpost.goauthentik.io/auth/traefik\n        trustForwardHeader: true\n        authResponseHeaders:\n          - X-authentik-username\n          - X-authentik-groups\n          - X-authentik-email\n          - X-authentik-name\n          - X-authentik-uid\n          - X-authentik-jwt\n          - X-authentik-meta-jwks\n          - X-authentik-meta-outpost\n          - X-authentik-meta-provider\n          - X-authentik-meta-app\n          - X-authentik-meta-version\n\n    geoblock:\n      plugin:\n        GeoBlock:\n          allowLocalRequests: \"true\"\n          allowUnknownCountries: \"false\"\n          blackListMode: \"false\"\n          api: https://get.geojs.io/v1/ip/country/{ip}\n          ipGeolocationHttpHeaderField: \"Cf-Ipcountry\"\n          xForwardedFor: \"X-Forwarded-For\"\n          apiTimeoutMs: \"150\"\n          cacheSize: \"15\"\n          addCountryHeader: \"true\"\n          forceMonthlyUpdate: \"true\"\n          logAllowedRequests: \"true\"\n          logApiRequests: \"true\"\n          logLocalRequests: \"true\"\n          silentStartUp: \"false\"\n          unknownCountryApiResponse: nil\n          countries:\n            - US\n\n    whitelist:\n      ipAllowList:\n        sourceRange:\n          - \"127.0.0.0/8\"\n        ipStrategy:\n          excludedIPs:\n            # Cloudflare IP List\n            # These will be ignored and the next IP in line will be checked\n            - 173.245.48.0/20\n            - 103.21.244.0/22\n            - 103.22.200.0/22\n            - 103.31.4.0/22\n            - 141.101.64.0/18\n            - 108.162.192.0/18\n            - 190.93.240.0/20\n            - 188.114.96.0/20\n            - 197.234.240.0/22\n            - 198.41.128.0/17\n            - 162.158.0.0/15\n            - 104.16.0.0/13\n            - 104.24.0.0/14\n            - 172.64.0.0/13\n            - 131.0.72.0/22\n            - 2400:cb00::/32\n            - 2606:4700::/32\n            - 2803:f800::/32\n            - 2405:b500::/32\n            - 2405:8100::/32\n            - 2a06:98c0::/29\n            - 2c0f:f248::/32\n</code></pre> <p></p> <p>At the bottom of the same file, we must now add a new loadBalancer rule under <code>http</code> -&gt; <code>services</code>. Change the <code>ip</code> and <code>port</code> if you have different values:</p> <pre><code>http:\n  routers:\n    [CODE FROM ABOVE]\n  services:\n    csf:\n      loadBalancer:\n        servers:\n          - url: \"https://172.17.0.1:8546/\"\n</code></pre> <p></p> <p>With the example above, we are also going to add a few middlewares:</p> <ul> <li>Authentik</li> <li>IP Whitelist</li> <li>Geographical Location Blocking</li> </ul> <p></p> <p>By applying the above middlewares, we can restrict what IP addresses can access your CSF WebUI, as well as add Authentik's authentication system so that you must authenticate first before getting into the CSF WebUI. These are all optional, and you can apply whatever middlewares you deem fit.</p> <p></p> <p>You must configure the above middleware if you have not added it to Traefik yet. This guide does not go into how to add middleware to Traefik, that information can be found at:</p> <ul> <li>https://doc.traefik.io/traefik/middlewares/overview/</li> </ul> <p></p> <p>Once you configure these changes in Traefik, you can restart your Traefik docker container. The command for that depends on how you set up the container. If you used <code>docker-compose.yml</code>, you can <code>cd</code> into the folder with the <code>docker-compose.yml</code> file and then execute:</p> <pre><code>docker compose down &amp;&amp; docker compose up -d\n</code></pre> <p></p> <p></p>", "tags": ["configure", "tutorials"]}, {"location": "csf/tutorials/traefik/#next-steps", "title": "Next Steps", "text": "Next: Integrating Authentik Instructions for adding Authentik middleware to ConfigServer via Traefik ../authentik ../authentik", "tags": ["configure", "tutorials"]}, {"location": "patcher/configure/", "title": "Patcher: Configure", "text": "", "tags": ["install", "patch"]}, {"location": "patcher/configure/#configure-patches", "title": "Configure Patches", "text": "<p>Before you run the downloaded patcher; there are several files you must open and edit. Do not run the patcher yet.</p> <p></p>", "tags": ["install", "patch"]}, {"location": "patcher/configure/#docker", "title": "Docker", "text": "<p>The Docker patch has a few settings that must be modified. To change these settings, open the file:</p> <pre><code>sudo nano /patch/docker.sh\n</code></pre> <p></p> <p>Find the following settings:</p> <pre><code>\n</code></pre> <p></p> <p>The settings are outlined below:</p> Setting Description <code>DOCKER_INT</code> main docker network interface <code>CSF_FILE_ALLOW</code> Path to your <code>csf.allow</code> file <code>CSF_COMMENT</code> comment added to each new whitelisted docker ip <code>DEBUG_ENABLED</code> debugging / better logs <code>IP_CONTAINERS</code> list of ip address blocks you will be using for your docker setup. these blocks will be whitelisted through ConfigServer Firewall <p></p>", "tags": ["install", "patch"]}, {"location": "patcher/configure/#settings", "title": "Settings", "text": "<p>Each individual setting with a detailed description</p> <p></p>", "tags": ["install", "patch"]}, {"location": "patcher/configure/#docker_int", "title": "DOCKER_INT", "text": "<p>2.0.0 <code>docker0</code> </p> <p>The main docker visual bridge network name; this is usually <code>docker0</code>, however, it can be changed. You can find a list of these by running the command</p> <pre><code>ip link show\n</code></pre> Output <pre><code>4: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default \n    link/ether 01:af:fd:1a:a1:2f ard ff:ff:ff:ff:ff:ff\n</code></pre> <p> </p>", "tags": ["install", "patch"]}, {"location": "patcher/configure/#csf_file_allow", "title": "CSF_FILE_ALLOW", "text": "<p>2.0.0 <code>/etc/csf/csf.allow</code> </p> <p>The full path to your ConfigServer's <code>csf.allow</code> file. Each time an IP from one of your docker containers is detected, the IP will be whitelisted in ConfigServer Firewall.</p> docker.sh <pre><code>CSF_FILE_ALLOW=\"/etc/csf/csf.allow\"\n</code></pre> <p> </p>", "tags": ["install", "patch"]}, {"location": "patcher/configure/#csf_comment", "title": "CSF_COMMENT", "text": "<p>2.0.0 <code>Docker container whitelist</code> </p> <p>This is the comment that will be appended to each IP that is added to your ConfigServer's <code>allow.csf</code> whitelist file.</p> docker.shcsf.allow <pre><code>CSF_COMMENT=\"Docker container whitelist\"\n</code></pre> <pre><code>172.18.0.21 # Docker container whitelist - Fri Jun 7 11:43:00 2024\n172.18.0.12 # Docker container whitelist - Fri Jun 7 11:43:01 2024\n172.18.0.11 # Docker container whitelist - Fri Jun 7 11:43:01 2024\n</code></pre> <p> </p>", "tags": ["install", "patch"]}, {"location": "patcher/configure/#debug_enabled", "title": "DEBUG_ENABLED", "text": "<p>2.0.0 <code>false</code> </p> <p>If set <code>true</code>, additional information will be printed to terminal when the user executes <code>sudo csf -ra</code></p> docker.sh <pre><code>DEBUG_ENABLED=\"false\"\n</code></pre> <p> </p>", "tags": ["install", "patch"]}, {"location": "patcher/configure/#ip_containers", "title": "IP_CONTAINERS", "text": "<p>2.0.0 <code>172.17.0.0/16</code> </p> <p>A list of IP blocks that you use within docker for container assignment.</p> docker.sh <pre><code>IP_CONTAINERS=(\n    '172.17.0.0/16'\n)\n</code></pre> <p></p> <p></p>", "tags": ["install", "patch"]}, {"location": "patcher/configure/#openvpn", "title": "OpenVPN", "text": "<p>The OpenVPN patch has a few settings that must be modified. To change these settings, open the file:</p> <pre><code>sudo nano /patch/openvpn.sh\n</code></pre> <p></p> <p>Find the following settings:</p> <pre><code>\n</code></pre> <p></p> <p>The settings are outlined below:</p> Setting Description <code>ETH_ADAPTER</code> name of primary network adapter <code>TUN_ADAPTER</code> name of OpenVPN tunnel adapter <code>IP_PUBLIC</code> public IP to your server <code>DEBUG_ENABLED</code> debugging / better logs <code>IP_POOL</code> list of subnets assigned to your OpenVPN server <p></p>", "tags": ["install", "patch"]}, {"location": "patcher/configure/#settings_1", "title": "Settings", "text": "<p>Each individual setting with a detailed description</p> <p></p>", "tags": ["install", "patch"]}, {"location": "patcher/configure/#eth_adapter", "title": "ETH_ADAPTER", "text": "<p>2.0.0 <code>$(ip route | grep default | sed -e \"s/^.*dev.//\" -e \"s/.proto.*//\")</code> </p> <p>The name of your primary server network adapter. This is usually <code>eth*</code>, <code>enp*</code>, etc.</p> openvpn.sh <pre><code>ETH_ADAPTER=$(ip route | grep default | sed -e \"s/^.*dev.//\" -e \"s/.proto.*//\")\n</code></pre> <p></p> <p>The default value attempts to auto-detect your network adapter name, however, you can specify the name manually:</p> openvpn.sh <pre><code>ETH_ADAPTER=\"eth0\"\n</code></pre> <p></p> <p>You can usually find your main network adapter with the command:</p> TerminalOutput <pre><code>ifconfig\n</code></pre> <pre><code>eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n        inet XX.XX.XX.XX  netmask 255.255.248.0  broadcast XX.XX.XX.XX\n        inet6 ea24::a1bd:ef15:15a5:aae  prefixlen 64  scopeid 0x20&lt;link&gt;\n        ether 01:15:72:15:2a:ab  txqueuelen 1000  (Ethernet)\n        RX packets 101924006  bytes 383095603887 (383.0 GB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 100519601  bytes 134852355384 (134.8 GB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;\n        loop  txqueuelen 1000  (Local Loopback)\n        RX packets 7741770  bytes 2099091655 (2.0 GB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 7741770  bytes 2099091655 (2.0 GB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre> <p> </p>", "tags": ["install", "patch"]}, {"location": "patcher/configure/#tun_adapter", "title": "TUN_ADAPTER", "text": "<p>2.0.0 <code>$(ip -br l | awk '$1 ~ \"^tun[0-9]\" { print $1}')</code> </p> <p>The name of the primary OpenVPN tunnel adapter name. This is usually <code>tun*</code>.</p> openvpn.sh <pre><code>TUN_ADAPTER=$(ip -br l | awk '$1 ~ \"^tun[0-9]\" { print $1}')\n</code></pre> <p></p> <p>The default value attempts to auto-detect your tunnel adapter name, however, you can specify the tunnel name manually:</p> openvpn.sh <pre><code>TUN_ADAPTER=\"tun0\"\n</code></pre> <p></p> <p>You can usually find your main network adapter with the command:</p> TerminalOutput <pre><code>ifconfig\n</code></pre> <pre><code>tun0: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1500\n        inet 10.8.0.1  netmask 255.255.255.0  destination 10.8.0.1\n        inet6 fe80::d70f:d8a8:32ab:1292  prefixlen 64  scopeid 0x20&lt;link&gt;\n        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)\n        RX packets 620722  bytes 134501334 (134.5 MB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 1449168  bytes 1756905789 (1.7 GB)\n        TX errors 0  dropped 37128 overruns 0  carrier 0  collisions 0\n</code></pre> <p> </p>", "tags": ["install", "patch"]}, {"location": "patcher/configure/#ip_public", "title": "IP_PUBLIC", "text": "<p>2.0.0 <code>$(curl -s ipinfo.io/ip)</code> </p> <p>The public IP address of your server.</p> openvpn.sh <pre><code>IP_PUBLIC=$(curl -s ipinfo.io/ip)\n</code></pre> <p></p> <p>The default value attempts to auto-detect your public IP address, however, you can specify the ip manually:</p> openvpn.sh <pre><code>IP_PUBLIC=\"204.22.36.22\"\n</code></pre> <p></p> <p>There are a few ways that you can obtain your server's public IP address:</p> Method 1Method 2Method 3 <pre><code>wget -q -O - ipinfo.io/ip\n\n# 204.22.36.22\n</code></pre> <pre><code>sudo apt-get install lynx -y\nlynx -source ipinfo.io/ip\n\n# 204.22.36.22\n</code></pre> <pre><code>curl ipinfo.io/ip\n\n# 204.22.36.22\n</code></pre> <p> </p>", "tags": ["install", "patch"]}, {"location": "patcher/configure/#debug_enabled_1", "title": "DEBUG_ENABLED", "text": "<p>2.0.0 <code>false</code> </p> <p>If set <code>true</code>, additional information will be printed to terminal when the patch is ran.</p> docker.sh <pre><code>DEBUG_ENABLED=\"false\"\n</code></pre> <p> </p>", "tags": ["install", "patch"]}, {"location": "patcher/configure/#ip_pool", "title": "IP_POOL", "text": "<p>2.0.0 <code>10.8.0.0/24</code> </p> <p>A list of subnets assigned to your OpenVPN server.</p> docker.sh <pre><code>IP_POOL=(\n    '10.8.0.0/24'\n)\n</code></pre> <p> </p> <p></p>", "tags": ["install", "patch"]}, {"location": "patcher/download/", "title": "Patcher: Download", "text": "", "tags": ["install", "patch"]}, {"location": "patcher/download/#download-patches", "title": "Download Patches", "text": "<p>After you have installed CSF, ConfigServer WebUI, and enabled both lfd and csf services; it's now time to run the patcher. The patcher will check your current configuration, and add a series of iptable rules so that apps like Docker and OpenVPN can communicate with the outside world and users can access your services.</p> <p></p>", "tags": ["install", "patch"]}, {"location": "patcher/download/#about", "title": "About", "text": "<p>The patcher includes several patches:</p> <code>Docker</code> <p>Allows for you to restart CSF without having to restart your docker containers. Scans every container you have set up in docker and adds a whitelist firewall rule. Automatically enables CSF Docker Mode.</p> <code>OpenVPN</code> <p>Allows VPN clients to connect to your OpenVPN server without being blocked by the CSF firewall.</p> <p></p> <p></p>", "tags": ["install", "patch"]}, {"location": "patcher/download/#download", "title": "Download", "text": "<p>Within your server, change to whatever directory where you want to download the patcher:</p> <pre><code>cd $HOME/Documents\n</code></pre> <p></p> <p>Next, ensure you have the package <code>git</code> installed so that we can use it to fetch the patch:</p> <pre><code>sudo apt-get install git\n</code></pre> <p></p> <p>Clone the patch repo:</p> <pre><code>git clone https://github.com/Aetherinox/csf-firewall.git\n</code></pre> <p></p> <p>Finally, set new permissions on the patcher's <code>install.sh</code> file by running the command:</p> <pre><code>sudo chmod +x /patch/install.sh\n</code></pre> <p></p> <p>The patcher is now on your system and ready to run. However, before we run the patcher; there are a few things that need to be configured. Do not run the patch yet. </p> <p>Proceed to the Configure section.</p> <p></p> <p></p>", "tags": ["install", "patch"]}, {"location": "patcher/download/#next-steps", "title": "Next Steps", "text": "Next: How to configure the patcher Instructions for configuring the patches included ../configure/ ../configure/", "tags": ["install", "patch"]}, {"location": "plugins/", "title": "Index", "text": ""}, {"location": "themes/install/", "title": "Themes: Install", "text": "", "tags": ["install", "themes"]}, {"location": "themes/install/#themes-install", "title": "Themes: Install", "text": "<p>This section outlines how to install custom themes that are included in the Github repository. These themes will override your existing ConfigServer Firewall theme, so be aware that you will be unable to utilize the default light theme unless you back up the original files and add them back.</p> <p></p>", "tags": ["install", "themes"]}, {"location": "themes/install/#available-themes", "title": "Available Themes", "text": "<p>We offer the following custom themes:</p> <p></p> <p></p> Dark theme preview <p></p> <p></p>", "tags": ["install", "themes"]}, {"location": "themes/install/#install", "title": "Install", "text": "<p>Head over to the Releases page and download the theme zip file:</p> <ul> <li><code>*-theme-dark.zip</code></li> </ul> <p></p> List of Github repository files available for download <p></p> <p>Extract the files from the zip to the same paths as they are shown in the zip. You should have the following files:</p> <p>Backup Data</p> <p>It is recommended that you back up your current copy of ConfigServer Firewall before overwriting the files with the custom theme files.</p> <ul> <li><code>/etc/csf/ui/images/*.css</code></li> <li><code>/usr/local/csf/lib/ConfigServer/*.pm</code></li> <li><code>/usr/sbin/lfd</code></li> </ul> <p> </p> <p>After you have copied over the new files from the zip, give ConfigServer Firewall a restart using the command:</p> <pre><code>sudo csf -ra\n</code></pre> <p></p> <p>Once ConfigServer Firewall is restarted, you should be able to open your browser and navigate to your firewall's normal URL address and see the new theme.</p> <p></p> Dark theme login page <p></p> <p></p>", "tags": ["install", "themes"]}, {"location": "themes/install/#uninstall", "title": "Uninstall", "text": "<p>Currently, there is no uninstaller available for custom themes. In order to remove your custom theme, you must restore the original ConfigServer Firewall theme files that come with the official version. These are located in the following paths:</p> <ul> <li><code>/etc/csf/ui/images/*.css</code></li> <li><code>/usr/local/csf/lib/ConfigServer/*.pm</code></li> <li><code>/usr/sbin/lfd</code></li> </ul> <p></p> <p></p>", "tags": ["install", "themes"]}]}