# #
#   @type               github workflow
#   @author             Aetherinox
#   @url                https://github.com/Aetherinox
#   @updated            09.05.25
#   @usage              releases a new public copy of ConfigServer Firewall
#
#   @secrets            secrets.SELF_TOKEN                                          self github personal access token (fine-grained)
#                       secrets.SELF_TOKEN_CL                                       self github personal access token (classic)
#                       secrets.NPM_TOKEN                                           self npmjs access token
#                       secrets.PYPI_API_TOKEN                                      self Pypi API token (production site) - https://pypi.org/
#                       secrets.PYPI_API_TEST_TOKEN                                 self Pypi API token (test site) - https://test.pypi.org/
#                       secrets.SELF_DOCKERHUB_TOKEN                                self Dockerhub token
#                       secrets.CODECOV_TOKEN                                       codecov upload token for nodejs projects
#                       secrets.API_GEOLITE2_KEY                                    maxmind API token
#                       secrets.CF_ACCOUNT_ID                                       cloudflare account id
#                       secrets.CF_ACCOUNT_TOKEN                                    cloudflare account token
#                       secrets.ARTIFACTS_DOMAIN                                    github artifacts domain name
#                       secrets.ARTIFACTS_PORT                                      github artifacts port
#                       secrets.ARTIFACTS_GITHUB_SSH_PRIVATE_KEY                    github artifacts server ssh private key
#                       secrets.ORG_TOKEN                                           org github personal access token (fine-grained)
#                       secrets.ORG_TOKEN_CL                                        org github personal access token (classic)
#                       secrets.ORG_DOCKERHUB_TOKEN                                 org dockerhub secret
#                       secrets.ORG_GITEA_TOKEN                                     org gitea personal access token (classic) with package:write permission
#                       secrets.BOT_GPG_KEY_ASC                                     bot gpg private key (armored) | BEGIN PGP PRIVATE KEY BLOCK
#                       secrets.BOT_GPG_KEY_B64                                     bot gpg private key (binary) converted to base64
#                       secrets.BOT_GPG_PASSPHRASE                                  bot gpg private key passphrase
#                       secrets.DISCORD_WEBHOOK_CHAN_GITHUB_RELEASES                discord webhook to report release notifications from github to discord
#                       secrets.DISCORD_WEBHOOK_CHAN_GITHUB_WORKFLOWS               discord webhook to report workflow notifications from github to discord
#                       secrets.DISCORD_WEBHOOK_CHAN_GITHUB_UPDATES                 discord webhook to report activity notifications from github to discord
#
#   @local              these workflows can be tested locally through the use of `act`
#                           https://github.com/nektos/act
#                       Extract act to folder
#                       Add system env var with path to act.exe
#                       Run the commands:
#                           git pull https://github.com/username/repo
#                           act -W .github/workflows/release.yml -P ubuntu-latest=catthehacker/ubuntu:full-22.04
#                           act -W .github/workflows/release.yml -s TOKEN_CL=XXXXXXXXXX --pull=false
# #

name: '📦 Release › Publish'
run-name: '📦 Release › Publish'

on:
    workflow_dispatch:
        inputs:

            # #
            #   Name of the plugin to use when creating the release zip filename
            #     e.g: csf-firewall-v1.0.0.zip
            # #

            PROJECT_NAME:
                description:        '📦 Name of Plugin'
                required:           true
                default:            'csf-firewall'
                type:               string

            # #
            #   true            the changelog generated in releases tab will only display single commits.
            #   false           the changelog shows pull requests completed based on their labels
            # #

            CHANGELOG_MODE_COMMIT:
                description:        '📑 Use Commits Instead of PRs'
                required:           true
                default:            true
                type:               boolean

            # #
            #   true            Will show all types of commits, including uncategorized
            #   false           WIll only show actions that have been categorized using the format
            #                       type(scope): description
            #                       type: description
            # #

            SHOW_UNCATEGORIZED:
                description:        '🗂️ Show Uncategorized Commits'
                required:           true
                default:            false
                type:               boolean

            # #
            #   true            released version will be marked as a development build and will have the v1.x.x-development tag instead of -latest
            #   false           release version will be marked with -latest docker tag
            # #

            RC_RELEASE:
                description:        '🧪 Build RC (Pre-release)'
                required:           true
                default:            false
                type:               boolean

            # #
            #   only needed if env variable `RC_ONLY` = true
            #   sets the version number for the release candidate
            #       e.g: csf-firewall-v15.0.0-rc.1
            # #

            RC_VERSION:
                description:        '🧪 RC (Pre-release) Ver (csf-firewall-rc.v1)'
                required:           false
                type:               string
                default:            '1'

# #
#   environment variables
# #

env:
    PROJECT_NAME:                   ${{ github.event.inputs.PROJECT_NAME || 'csf-firewall' }}
    CHANGELOG_MODE_COMMIT:          ${{ github.event.inputs.CHANGELOG_MODE_COMMIT || true }}
    SHOW_UNCATEGORIZED:             ${{ github.event.inputs.SHOW_UNCATEGORIZED || false }}
    RC_RELEASE:                     ${{ github.event.inputs.RC_RELEASE || false }}
    RC_VERSION:                     ${{ github.event.inputs.RC_VERSION || '1' }}
    ASSIGN_USER:                    Aetherinox
    BOT_NAME_1:                     BinaryServ
    BOT_NAME_DEPENDABOT:            dependabot[bot]
    BOT_NAME_RENOVATE:              renovate[bot]
    GPG_KEY_BASE64:                 ${{ secrets.ADMINSERV_GPG_KEY_B64 }}
    GPG_KEY_PASSPHRASE:             ${{ secrets.ADMINSERV_GPG_PASSPHRASE }}

# #
#   jobs
# #

jobs:

    # #
    #   Jobs › Precheck
    # #

    job-precheck:
        name: >-
            📦 Package › Precheck
      # runs-on: ubuntu-latest
        runs-on: apollo-x64
        timeout-minutes: 15
        permissions:
            contents: write
            packages: write
        outputs:
            version_csf: ${{ steps.task_build_env.outputs.VERSION_CSF }}
            version_build: ${{ steps.task_build_env.outputs.VERSION_BUILD }}
            version_tag_prev: ${{ steps.task_build_env.outputs.VERSION_TAG_PREV }}
        steps:

            # #
            #   Upload › Checkout
            # #

            - name: >-
                  ☑️ Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            # #
            #   Upload › Job Information
            # #

            - name: >-
                  🔄 Load Job
              uses: qoomon/actions--context@v4
              id: 'context'

            # #
            #   Upload › Start
            # #

            - name: >-
                  ✅ Start
              run: |
                  echo "‎"
                  echo "―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――"
                  echo " Starting Job ${{ steps.context.outputs.job_name }}"
                  echo "―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――"

                  YEAR="$(date +'%Y')"
                  echo "YEAR=${YEAR}" >> $GITHUB_ENV

                  NOW="$(date +'%m-%d-%Y %H:%M:%S')"                                                #  02-25-2025 12:49:48
                  echo "NOW=${NOW}" >> $GITHUB_ENV

                  NOW_SHORT="$(date +'%m-%d-%Y')"                                                   #  02-25-2025
                  echo "NOW_SHORT=${NOW_SHORT}" >> $GITHUB_ENV

                  NOW_LONG="$(date +'%m-%d-%Y %H:%M')"                                              #  02-25-2025 12:49
                  echo "NOW_LONG=${NOW_LONG}" >> $GITHUB_ENV

                  NOW_DOCKER="$(date +'%Y%m%d')"                                                    #  20250225
                  echo "NOW_DOCKER=${NOW_DOCKER}" >> $GITHUB_ENV

                  NOW_DOCKER_TS="$(date -u +'%FT%T.%3NZ')"                                          #  2025-02-25T12:50:11.569Z
                  echo "NOW_DOCKER_TS=${NOW_DOCKER_TS}" >> $GITHUB_ENV

                  SHA1="$(git rev-parse HEAD)"                                                      #  71fad013cfce9116ec62779e4a7e627fe4c33627
                  echo "SHA1=${SHA1}" >> $GITHUB_ENV

                  SHA1_GH="$(echo ${GITHUB_SHA})"                                                   #  71fad013cfce9116ec62779e4a7e627fe4c33627
                  echo "SHA1_GH=${SHA1_GH}" >> $GITHUB_ENV

                  PKG_VER_1DIGIT="$(echo ${{ env.IMAGE_VERSION }} | cut -d '.' -f1-1)"              #  15.52.35 > 15
                  echo "PKG_VER_1DIGIT=${PKG_VER_1DIGIT}" >> $GITHUB_ENV

                  PKG_VER_2DIGIT="$(echo ${{ env.IMAGE_VERSION }} | cut -d '.' -f1-2)"              #  15.52.35 > 15.52
                  echo "PKG_VER_2DIGIT=${PKG_VER_2DIGIT}" >> $GITHUB_ENV

                  echo "―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――"
                  echo "‎"
                  echo "‎"
                  sudo apt -qq update
                  sudo apt -qq install tree
                  echo "‎"
                  echo "‎"
                  echo "―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――"
                  echo "‎"
                  echo "‎"
                  echo " Runner .............. ${{ runner.name }}"
                  echo " Workflow ............ ${{ github.workflow }} (#${{ github.workflow_ref }})"
                  echo " Run Number .......... ${{ github.run_number }}"
                  echo " Ref ................. ${{ github.ref }}"
                  echo " Ref Name ............ ${{ github.ref_name }}"
                  echo " Event Name .......... ${{ github.event_name }}"
                  echo " Repo ................ ${{ github.repository }}"
                  echo " Repo Owner .......... ${{ github.repository_owner }}"
                  echo " Run ID .............. https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  echo " Triggered By ........ ${{ github.actor }}"
                  echo " SHA 1 (GITHUB_SHA) .. ${GITHUB_SHA}"
                  echo " SHA 2 (github.sha) .. ${{ github.sha }}"
                  echo " SHA 3 (env.SHA1) .... ${SHA1}"
                  echo " SHA 4 (env.SHA1_GH) . ${SHA1_GH}"
                  echo " Workspace ........... ${{ github.workspace }}"
                  echo " PWD ................. ${PWD}"
                  echo " Job Name ............ ${{ steps.context.outputs.job_name }}"
                  echo " Job ID .............. ${{ steps.context.outputs.job_id }}"
                  echo " Job URL ............. ${{ steps.context.outputs.job_url }}"
                  echo " Run ID .............. ${{ steps.context.outputs.run_id }}"
                  echo " Run Attempt ......... ${{ steps.context.outputs.run_attempt }}"
                  echo " Run Number .......... ${{ steps.context.outputs.run_number }}"
                  echo " Run URL ............. ${{ steps.context.outputs.run_url }}"
                  echo " Run Env ............. ${{ steps.context.outputs.environment }}"
                  echo " Run Env URL ......... ${{ steps.context.outputs.environment_url }}"
                  echo " Run Deployment ...... ${{ steps.context.outputs.deployment_id }}"
                  echo " Run Deployment URL .. ${{ steps.context.outputs.deployment_url }}"
                  echo " Run Deployment ...... ${{ steps.context.outputs.deployment_id }}"
                  echo " Run Runner Name ..... ${{ steps.context.outputs.runner_name }}"
                  echo " Run Runner ID ....... ${{ steps.context.outputs.runner_id }}"
                  echo " Year ................ ${YEAR}"
                  echo " Now ................. ${NOW}"
                  echo " Now (Short) ......... ${NOW_SHORT}"
                  echo " Now (Long) .......... ${NOW_LONG}"
                  echo " Now (Docker) ........ ${NOW_DOCKER}"
                  echo " Now (Docker TS) ..... ${NOW_DOCKER_TS}"
                  echo "‎"
                  echo "‎"
                  echo "―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――"
                  echo "‎"
                  echo "‎"
                  tree -I node_modules -I .git -I blocklists -I ./
                  echo "‎"
                  echo "‎"
                  echo "―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――"
                  echo "‎"
                  echo "‎"

            # #
            #   Upload › Get Previous Tag
            #   
            #   @outputs                  steps.task_tag_prev.outputs.tag
            # #

            - name: >-
                  🏷️ Get Previous tag
              id: task_tag_prev
              uses: 'WyriHaximus/github-action-get-previous-tag@v1'
              with:
                  fallback: 1.0.0

            # #
            #   Upload › Get Build Variables
            #   
            #   Gets the values needed to build csf in the next job
            # #

            - name: >-
                  🔨 Get Build Variables
              id: task_build_env
              run: |
                  #  current csf version
                  version_csf=$(grep -m1 -o '.*' src/version.txt | xargs)
                  echo "VERSION_CSF=$version_csf" >> $GITHUB_OUTPUT

                  #  build nmber
                  version_build=$(date -u '+%y%m-%d')
                  echo "VERSION_BUILD=$version_build" >> $GITHUB_OUTPUT

                  #  previous tag
                  echo "VERSION_TAG_PREV=${{ steps.task_tag_prev.outputs.tag }}" >> $GITHUB_OUTPUT

                  echo -e "CSF Version ........... $version_csf"
                  echo -e "CSF Build ............. $version_build"
                  echo -e "Previous Tag .......... ${{ steps.task_tag_prev.outputs.tag }}"

            # #
            #   Upload › Verbose › List Tree
            # #

            - name: >-
                  🌲 Verbose › Tree Listing
              run: |
                  echo "―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――"
                  echo " PWD ..................... ${PWD}"
                  echo " GITHUB.WORKSPACE ........ ${{ github.workspace }}"
                  echo -e
                  echo -e
                  tree -I node_modules -I .git -I blocklists -I ./
                  echo "―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――"

    # #
    #   Job > Release
    # #

    job-release:
        name: >-
          📦 Package › Release
        # runs-on: ubuntu-latest
        runs-on: apollo-x64
        timeout-minutes: 10
        needs: [ job-precheck ]
        permissions:
            contents: write
            packages: write
        env:
            VERSION_CSF: ${{ needs.job-precheck.outputs.version_csf }}
            VERSION_BUILD: ${{ needs.job-precheck.outputs.version_build }}
            VERSION_TAG_PREV: ${{ needs.job-precheck.outputs.version_tag_prev }}
        steps:

            # #
            #   Release › Checkout
            # #

            - name: >-
                  ☑️ Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            # #
            #   Release › Job Information
            # #

            - name: >-
                  🔄 Load Job
              uses: qoomon/actions--context@v4
              id: 'context'

            # #
            #   elease › Debug › View passed values
            # #

            - name: >-
                  ⚙️ Debug › Passed Values
              run: |
                  echo "TAG VERSION (Previous) ........... ${{ env.VERSION_TAG_PREV }}"
                  echo "CSF VERSION ...................... ${{ env.VERSION_CSF }}"
                  echo "RELEASE BUILD .................... ${{ env.VERSION_BUILD }}"

            # #
            #   Release › Summary Digest
            # #

            - name: >-
                  ✅ Summary Digest
              run: |
                  echo "‎"
                  echo "―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――"
                  echo " Starting Job ${{ steps.context.outputs.job_name }}"
                  echo "―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――"

                  YEAR="$(date +'%Y')"
                  echo "YEAR=${YEAR}" >> $GITHUB_ENV

                  NOW="$(date +'%m-%d-%Y %H:%M:%S')"                                                #  02-25-2025 12:49:48
                  echo "NOW=${NOW}" >> $GITHUB_ENV

                  NOW_SHORT="$(date +'%m-%d-%Y')"                                                   #  02-25-2025
                  echo "NOW_SHORT=${NOW_SHORT}" >> $GITHUB_ENV

                  NOW_LONG="$(date +'%m-%d-%Y %H:%M')"                                              #  02-25-2025 12:49
                  echo "NOW_LONG=${NOW_LONG}" >> $GITHUB_ENV

                  NOW_DOCKER="$(date +'%Y%m%d')"                                                    #  20250225
                  echo "NOW_DOCKER=${NOW_DOCKER}" >> $GITHUB_ENV

                  NOW_DOCKER_TS="$(date -u +'%FT%T.%3NZ')"                                          #  2025-02-25T12:50:11.569Z
                  echo "NOW_DOCKER_TS=${NOW_DOCKER_TS}" >> $GITHUB_ENV

                  SHA1="$(git rev-parse HEAD)"                                                      #  71fad013cfce9116ec62779e4a7e627fe4c33627
                  echo "SHA1=${SHA1}" >> $GITHUB_ENV

                  SHA1_GH="$(echo ${GITHUB_SHA})"                                                   #  71fad013cfce9116ec62779e4a7e627fe4c33627
                  echo "SHA1_GH=${SHA1_GH}" >> $GITHUB_ENV

                  PKG_VER_1DIGIT="$(echo ${{ env.IMAGE_VERSION }} | cut -d '.' -f1-1)"              #  15.52.35 > 15
                  echo "PKG_VER_1DIGIT=${PKG_VER_1DIGIT}" >> $GITHUB_ENV

                  PKG_VER_2DIGIT="$(echo ${{ env.IMAGE_VERSION }} | cut -d '.' -f1-2)"              #  15.52.35 > 15.52
                  echo "PKG_VER_2DIGIT=${PKG_VER_2DIGIT}" >> $GITHUB_ENV

                  echo "―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――"
                  echo "‎"
                  echo "‎"
                  sudo apt -qq update
                  sudo apt -qq install tree
                  echo "‎"
                  echo "‎"
                  echo "―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――"
                  echo "‎"
                  echo "‎"
                  echo " Runner .............. ${{ runner.name }}"
                  echo " Workflow ............ ${{ github.workflow }} (#${{ github.workflow_ref }})"
                  echo " Run Number .......... ${{ github.run_number }}"
                  echo " Ref ................. ${{ github.ref }}"
                  echo " Ref Name ............ ${{ github.ref_name }}"
                  echo " Event Name .......... ${{ github.event_name }}"
                  echo " Repo ................ ${{ github.repository }}"
                  echo " Repo Owner .......... ${{ github.repository_owner }}"
                  echo " Run ID .............. https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  echo " Triggered By ........ ${{ github.actor }}"
                  echo " SHA 1 (GITHUB_SHA) .. ${GITHUB_SHA}"
                  echo " SHA 2 (github.sha) .. ${{ github.sha }}"
                  echo " SHA 3 (env.SHA1) .... ${SHA1}"
                  echo " SHA 4 (env.SHA1_GH) . ${SHA1_GH}"
                  echo " Workspace ........... ${{ github.workspace }}"
                  echo " PWD ................. ${PWD}"
                  echo " Job Name ............ ${{ steps.context.outputs.job_name }}"
                  echo " Job ID .............. ${{ steps.context.outputs.job_id }}"
                  echo " Job URL ............. ${{ steps.context.outputs.job_url }}"
                  echo " Run ID .............. ${{ steps.context.outputs.run_id }}"
                  echo " Run Attempt ......... ${{ steps.context.outputs.run_attempt }}"
                  echo " Run Number .......... ${{ steps.context.outputs.run_number }}"
                  echo " Run URL ............. ${{ steps.context.outputs.run_url }}"
                  echo " Run Env ............. ${{ steps.context.outputs.environment }}"
                  echo " Run Env URL ......... ${{ steps.context.outputs.environment_url }}"
                  echo " Run Deployment ...... ${{ steps.context.outputs.deployment_id }}"
                  echo " Run Deployment URL .. ${{ steps.context.outputs.deployment_url }}"
                  echo " Run Deployment ...... ${{ steps.context.outputs.deployment_id }}"
                  echo " Run Runner Name ..... ${{ steps.context.outputs.runner_name }}"
                  echo " Run Runner ID ....... ${{ steps.context.outputs.runner_id }}"
                  echo " Year ................ ${YEAR}"
                  echo " Now ................. ${NOW}"
                  echo " Now (Short) ......... ${NOW_SHORT}"
                  echo " Now (Long) .......... ${NOW_LONG}"
                  echo " Now (Docker) ........ ${NOW_DOCKER}"
                  echo " Now (Docker TS) ..... ${NOW_DOCKER_TS}"
                  echo "‎"
                  echo "‎"
                  echo "―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――"
                  echo "‎"
                  echo "‎"
                  tree -I node_modules -I .git -I blocklists -I ./
                  echo "‎"
                  echo "‎"
                  echo "―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――"
                  echo "‎"
                  echo "‎"

            # #
            #   Release › Build › Stable
            # #

            - name: '🔨 Build › Stable ( ${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }} )'
              id: task_release_build_st
              if: |
                  startsWith( inputs.RC_RELEASE, false ) ||
                  startsWith( env.RC_RELEASE, false )
              run: |
                  BASE_PATH="${GITHUB_WORKSPACE}"

                  #  Zip contents of "📁 src" | first add readme and license | then add all files from src folddr
                  echo "⚙️ Building STABLE Package .zip ${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}.zip"
                  zip "${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}.zip" README.md LICENSE.md 
                  (cd src && zip -r "../${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}.zip" .)

                  #  Zip contents of "📁 extras/helper_scripts"
                  echo "⚙️ Building STABLE Package .zip ${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}-helpers.zip"
                  zip -r "${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}-helpers.zip" README.md LICENSE.md -j extras/helper_scripts/*

                  #  Zip contents of "📁 extras/theme_dark"
                  echo "⚙️ Building STABLE Package .zip ${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}-theme-dark.zip"
                  cd extras/theme_dark || exit 1
                  zip -r "../../${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}-theme-dark.zip" ./*
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.ADMINSERV_TOKEN_CL }}

            # #
            #   Release › Build › Release Candidate
            # #

            - name: "🔨 Build › RC ( ${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}-rc.${{ env.RC_VERSION }} )"
              id: task_release_build_rc
              if: |
                  startsWith( inputs.RC_RELEASE, true ) ||
                  startsWith( env.RC_RELEASE, true )
              run: |
                  BASE_PATH="${GITHUB_WORKSPACE}"

                  #  Zip contents of "📁 src" | first add readme and license | then add all files from src folddr
                  echo "⚙️ Building RC Package .zip ${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}-rc.${{ env.RC_VERSION }}.zip"
                  zip "${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}-rc.${{ env.RC_VERSION }}.zip" README.md LICENSE.md 
                  (cd src && zip -r "../${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}-rc.${{ env.RC_VERSION }}" .)

                  #  Zip contents of "📁 extras/helper_scripts"
                  echo "⚙️ Building RC Package .zip ${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}-rc.${{ env.RC_VERSION }}-helpers.zip"
                  zip -r "${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}-rc.${{ env.RC_VERSION }}-helpers.zip" README.md LICENSE.md -j extras/helper_scripts/*

                  #  Zip contents of "📁 extras/theme_dark"
                  echo "⚙️ Building RC Package .zip ${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}-rc.${{ env.RC_VERSION }}-theme-dark.zip"
                  cd extras/theme_dark || exit 1
                  zip -r "../../${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}-rc.${{ env.RC_VERSION }}-theme-dark.zip" ./*
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.ADMINSERV_TOKEN_CL }}

            # #
            #   Release › Verbose › List Tree
            # #

            - name: >-
                  🌲 Verbose › Tree Listing
              run: |
                  echo "―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――"
                  echo " PWD ..................... ${PWD}"
                  echo " GITHUB.WORKSPACE ........ ${{ github.workspace }}"
                  echo -e
                  echo -e
                  tree -I node_modules -I .git -I blocklists -I ./
                  echo "―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――"

            # #
            #   Release › Tags › Pre Create
            #   
            #   in order to use the changelog github action, you must pre-create the tag otherwise
            #   the changelog action will have no idea what tag you are going to be creating and
            #   the list of commits will not be for the correct release.
            # #

            - name: '🔖 Tag › Pre Create ${{ env.VERSION_CSF }}'
              uses: rickstaa/action-create-tag@v1
              id: task_release_tag_create
              with:
                  tag: ${{ env.VERSION_CSF }}
                  tag_exists_error: false
                  message: "Latest release"
                  gpg_private_key: ${{ secrets.ADMINSERV_GPG_KEY_ASC }}
                  gpg_passphrase: ${{ secrets.ADMINSERV_GPG_PASSPHRASE }}

            # #
            #   Release › Tags › Confirm
            # #

            - name: '🔖 Tag › Confirm ${{ env.VERSION_CSF }}'
              run: |
                  echo "Tag already present: ${{ env.TAG_EXISTS }}"
                  echo "Tag already present: ${{ steps.task_release_tag_create.outputs.tag_exists }}"

            # #
            #   Release › GPG › Import Key (No Passphrase)
            #   
            #   requires your GPG private key, converted to base64 binary .gpg (not armored .asc)
            #   
            #   this is utilized to generate signed hash digest
            #   
            #       find . -maxdepth 1 \( -name '*.zip' -o -name '*.gz' \) -printf '%P\n' | xargs -r sha1sum | gpg --digest-algo sha256 --clearsign > sha1sum.txt.asc
            #       find . -maxdepth 1 \( -name '*.zip' -o -name '*.gz' \) -printf '%P\n' | xargs -r sha256sum | gpg --digest-algo sha256 --clearsign > sha256
            # #

            - name: '🪪 Release › GPG › Import Signing Key › W/o Passphrase'
              if: env.GPG_KEY_BASE64 != '' && env.GPG_KEY_PASSPHRASE == ''
              run: |
                  echo "$GPG_KEY_BASE64" | base64 -di | gpg --import

            # #
            #   Release › GPG › Import Key (With Passphrase)
            #   
            #   requires your GPG private key, converted to base64 binary .gpg (not armored .asc)
            #   
            #   this is utilized to generate signed hash digest
            #   
            #       find . -maxdepth 1 \( -name '*.zip' -o -name '*.gz' \) -printf '%P\n' | xargs -r sha1sum | gpg --digest-algo sha256 --clearsign > sha1sum.txt.asc
            #       find . -maxdepth 1 \( -name '*.zip' -o -name '*.gz' \) -printf '%P\n' | xargs -r sha256sum | gpg --digest-algo sha256 --clearsign > sha256
            # #

            - name: '🪪 Release › GPG › Import Signing Key › w/ Passphrase'
              if: env.GPG_KEY_BASE64 != '' && env.GPG_KEY_PASSPHRASE != ''
              run: |
                  echo "$GPG_KEY_BASE64" | base64 -di > "/tmp/signing-key.gpg"
                  echo "$GPG_KEY_PASSPHRASE" | gpg --pinentry-mode loopback --passphrase-fd 0 --import "/tmp/signing-key.gpg"
                  (echo "$GPG_KEY_PASSPHRASE"; echo; echo) | gpg --command-fd 0 --pinentry-mode loopback --change-passphrase $(gpg --list-secret-keys --with-colons 2> /dev/null | grep '^sec:' | cut --delimiter ':' --fields 5 | tail -n 1)

            # #
            #   Release › Verbose › List Tree
            # #

            - name: >-
                  🌲 Verbose › Tree Listing
              run: |
                  echo "―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――"
                  echo " PWD ..................... ${PWD}"
                  echo " GITHUB.WORKSPACE ........ ${{ github.workspace }}"
                  echo -e
                  echo -e
                  tree -I node_modules -I .git -I blocklists -I ./
                  echo "―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――"

            # #
            #   Release › Checksum › Stable
            # #

            - name: '🆔 Checksum › Stable'
              if: |
                  startsWith( inputs.RC_RELEASE, false ) ||
                  startsWith( env.RC_RELEASE, false )
              run: |
                  #  Filename › Main ›App
                  file_app_main="${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}.zip"
                  echo "FILE_APP_MAIN=${file_app_main}" >> $GITHUB_ENV

                  #  Filename › Extra › Helpers
                  file_extra_helpers="${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}-helpers.zip"
                  echo "FILE_EXTRA_HELPERS=${file_extra_helpers}" >> $GITHUB_ENV

                  #  Filename › Extra › Dark
                  file_extra_dark="${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}-theme-dark.zip"
                  echo "FILE_EXTRA_DARK=${file_extra_dark}" >> $GITHUB_ENV



                  #  SHA1SUM › Main App
                  sha1sum_app_main="$(shasum --algorithm 1 ${file_app_main} | awk '{ print $1 }')"
                  echo "SHA1SUM_APP_MAIN=${sha1sum_extra_dark}" >> $GITHUB_ENV

                  #  SHA1SUM › Extra › Helpers
                  sha1sum_extra_helpers="$(shasum --algorithm 1 ${file_extra_helpers} | awk '{ print $1 }')"
                  echo "SHA1SUM_EXTRA_HELPERS=${sha1sum_extra_helpers}" >> $GITHUB_ENV

                  #  SHA1SUM › Extra › Dark
                  sha1sum_extra_dark="$(shasum --algorithm 1 ${file_extra_dark} | awk '{ print $1 }')"
                  echo "SHA1SUM_EXTRA_DARK=${sha1sum_extra_dark}" >> $GITHUB_ENV



                  #  SHA256SUM › Main App
                  sha256sum_app_main="$(shasum --algorithm 256 ${file_app_main} | awk '{ print $1 }')"
                  echo "SHA256SUM_APP_MAIN=${sha256sum_app_main}" >> $GITHUB_ENV

                  #  SHA256SUM › Extra › Helpers 
                  sha256sum_extra_helpers"$(shasum --algorithm 256 ${file_extra_helpers} | awk '{ print $1 }')"
                  echo "SHA256SUM_EXTRA_HELPERS=${sha256sum_extra_helpers}" >> $GITHUB_ENV

                  #  SHA256SUM › Extra › Dark 
                  sha256sum_extra_dark="$(shasum --algorithm 256 ${file_extra_dark} | awk '{ print $1 }')"
                  echo "SHA256SUM_EXTRA_DARK=${sha256sum_extra_dark}" >> $GITHUB_ENV



                  #  get sha1 and sha256 for .zip and .gz files
                  find . -maxdepth 1 \( -name '*.zip' -o -name '*.gz' \) -printf '%P\n' | xargs -r sha1sum | gpg --digest-algo sha256 --clearsign > sha1sum.txt.asc
                  find . -maxdepth 1 \( -name '*.zip' -o -name '*.gz' \) -printf '%P\n' | xargs -r sha256sum | gpg --digest-algo sha256 --clearsign > sha256sum.txt.asc



                  #  create sha .sig from .asc
                  gpg --batch --yes --quiet --armor --detach-sig --sign --output "sha256sum.sig" "sha256sum.txt.asc"
                  gpg --batch --yes --quiet --armor --detach-sig --sign --output "sha1sum.sig" "sha1sum.txt.asc"

            # #
            #   Release › Contributor Images
            # #

            - name: '🥸 Contributors › Generate'
              id: task_release_contribs_generate
              uses: jaywcjlove/github-action-contributors@main
              with:
                  filter-author: (renovate\[bot\]|renovate-bot|dependabot\[bot\])
                  output: CONTRIBUTORS.svg
                  avatarSize: 42

            # #
            #   Release › Changelog › Pre-setup
            #
            #   generates a changelog from the github api. requires a PREVIOUS_TAG in order to figure
            #   out the changes made between the two versions.
            #
            #   outputs:
            #       ${{ steps.changelog.outputs.changelog }}
            # #

            - name: '📝 Changelog › Pre Setup (Categorized Commits)'
              run: |
                  echo "TAG_LAST=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
                  echo "COMMIT_LAST=$(git rev-parse HEAD)" >> $GITHUB_ENV

            # #
            #   Release › Changelog › Build (Categorized)
            #
            #   generates a changelog from the github api. requires a TAG_LAST in order to figure
            #   out the changes made between the two versions.
            #
            #   outputs:
            #       ${{ steps.task_release_changelog_categorized.outputs.changelog }}
            # #

            - name: '📝 Changelog › Build (Categorized)'
              id: task_release_changelog_categorized
              uses: mikepenz/release-changelog-builder-action@v5
              if: |
                  startsWith( inputs.SHOW_UNCATEGORIZED, false ) ||
                  startsWith( env.SHOW_UNCATEGORIZED, false )
              with:
                  token: ${{ secrets.ADMINSERV_TOKEN }}
                  #fromTag: "${{ env.TAG_LAST }}"
                  #toTag: "${{ github.ref }}"
                  configuration: ".github/changelog-configuration.json"
                  ignorePreReleases: false
                  commitMode: ${{ inputs.CHANGELOG_MODE_COMMIT || env.CHANGELOG_MODE_COMMIT }}
                  fetchReleaseInformation: true
                  fetchViaCommits: true
                  configurationJson: |
                    {
                      "template": "## Release Info \n| Item | Value |\n| --- | --- |\n| <sub>🏷️ Version</sub> | <sub>${{ env.VERSION_CSF }}</sub>|\n| <sub>📄 ${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}.tgz</sub> | <sub>ConfigServer Firewall main app</sub><br /><sub>${{ env.SHA256SUM_MAIN }}</sub>|\n| <sub>📄 ${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}-helpers.zip</sub> | <sub>Helper patches. View README for instructions</sub><br /><sub>${{ env.SHA256SUM_EXTRA_HELPERS }}</sub>|\n| <sub>📄 ${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}-theme-dark.zip</sub> | <sub>Dark theme</sub><br /><sub>${{ env.SHA256SUM_EXTRA_DARK }}</sub>|\n| <sub>🕟 Stamp</sub>| <sub>`#{{FROM_TAG}}-#{{FROM_TAG_DATE}} 🔺 #{{TO_TAG}}-#{{TO_TAG_DATE}}`</sub>|\n| <sub>📅 Last Release</sub>| <sub>`#{{DAYS_SINCE}} days ago`</sub>|\n\n<br>\n\n---\n\n<br>\n\n### What's New\nThis release contains the following changes:\n\n<br>\n\n---\n\n<br>\n\n### Statistics\nHow the files have changed:\n<ul><li><a href='#{{RELEASE_DIFF}}'>Changed files</a>  : <b>#{{CHANGED_FILES}}</b> </li><li>Changes  : <b>#{{CHANGES}}</b> </li><li>Commits : <b>#{{COMMITS}}</b> </li><li>Additions : <b>#{{ADDITIONS}}</b></li><li>Deletions : <b>#{{DELETIONS}}</b></li><li>PRs (categorized) : <b>#{{CATEGORIZED_COUNT}}</b></li><li>PRs (uncategorized) : <b>#{{UNCATEGORIZED_COUNT}}</b></li><li>PRs (open) : <b>#{{OPEN_COUNT}}</b></li>\n<br />\n</ul>\n\n<br>\n\n---\n\n<br>\n\n### Pull Requests\nThis release is associated with the following pull requests:\n#{{CHANGELOG}}\n\n<br>\n\n---\n\n<br>\n\n"
                    }
              env:
                  GITHUB_TOKEN: ${{ secrets.ADMINSERV_TOKEN }}

            # #
            #   Release › Changelog › Build (Uncategorized)
            #
            #   generates a changelog from the github api. requires a TAG_LAST in order to figure
            #   out the changes made between the two versions.
            #
            #   outputs:
            #       ${{ steps.task_release_changelog_categorized.outputs.changelog }}
            #
            #   shows only categorized commits using the commit standards
            #                type(scope): description
            #                type: description
            # #

            - name: '📝 Changelog › Build (Uncategorized)'
              id: task_release_changelog_uncategorized
              uses: mikepenz/release-changelog-builder-action@v5
              if: |
                  startsWith( inputs.SHOW_UNCATEGORIZED, true ) ||
                  startsWith( env.SHOW_UNCATEGORIZED, true )
              with:
                  token: ${{ secrets.ADMINSERV_TOKEN }}
                  #fromTag: "${{ env.TAG_LAST }}"
                  #toTag: "${{ github.ref }}"
                  configuration: ".github/changelog-configuration.json"
                  ignorePreReleases: false
                  commitMode: ${{ inputs.CHANGELOG_MODE_COMMIT || env.CHANGELOG_MODE_COMMIT }}
                  fetchReleaseInformation: true
                  fetchViaCommits: true
                  configurationJson: |
                    {
                      "template": "## Release Info \n| Item | Value |\n| --- | --- |\n| <sub>🏷️ Version</sub> | <sub>${{ env.VERSION_CSF }}</sub>|\n| <sub>📄 ${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}.tgz</sub> | <sub>ConfigServer Firewall main app</sub><br /><sub>${{ env.SHA256SUM_MAIN }}</sub>|\n| <sub>📄 ${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}-helpers.zip</sub> | <sub>Helper patches. View README for instructions</sub><br /><sub>${{ env.SHA256SUM_EXTRA_HELPERS }}</sub>|\n| <sub>📄 ${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}-theme-dark.zip</sub> | <sub>Dark theme</sub><br /><sub>${{ env.SHA256SUM_EXTRA_DARK }}</sub>|\n| <sub>🕟 Stamp</sub>| <sub>`#{{FROM_TAG}}-#{{FROM_TAG_DATE}} 🔺 #{{TO_TAG}}-#{{TO_TAG_DATE}}`</sub>|\n| <sub>📅 Last Release</sub>| <sub>`#{{DAYS_SINCE}} days ago`</sub>|\n\n<br>\n\n---\n\n<br>\n\n### What's New\nThis release contains the following changes:\n\n<br>\n\n---\n\n<br>\n\n### Statistics\nHow the files have changed:\n<ul><li><a href='#{{RELEASE_DIFF}}'>Changed files</a>  : <b>#{{CHANGED_FILES}}</b> </li><li>Changes  : <b>#{{CHANGES}}</b> </li><li>Commits : <b>#{{COMMITS}}</b> </li><li>Additions : <b>#{{ADDITIONS}}</b></li><li>Deletions : <b>#{{DELETIONS}}</b></li><li>PRs (categorized) : <b>#{{CATEGORIZED_COUNT}}</b></li><li>PRs (uncategorized) : <b>#{{UNCATEGORIZED_COUNT}}</b></li><li>PRs (open) : <b>#{{OPEN_COUNT}}</b></li>\n<br />\n</ul>\n\n<br>\n\n---\n\n<br>\n\n### Pull Requests\nThis release is associated with the following pull requests:\n#{{CHANGELOG}}\n\n<br>\n\n"
                    }
              env:
                  GITHUB_TOKEN: ${{ secrets.ADMINSERV_TOKEN }}

            # #
            #   Release › Changelog › Convert step into ENV
            #
            #   This is a requirement in order for the action mikepenz/release-changelog-builder-action@v5 to work properly.
            #   If you use special characters like quotes and tildes in your push comments, bash will have no way of knowing
            #   if it's part of the changelog, or code itself.
            #
            #   By converting the step into an env var, we quote the text, and it fixes the issue.
            #
            #   For every step that you need to print the changelog text, first define the env var
            #   env:
            #       CHANGELOG_CATEGORIZED: ${{ steps.task_release_changelog_categorized.outputs.changelog }}
            #
            #   Then you can call the changelog in the body / run command with
            #       echo "$CHANGELOG_CATEGORIZED"
            # #

            - name: '🙊 Changelog › Step to Env › Categorized'
              id: task_release_changelog_escape_categorized
              if: |
                  startsWith( inputs.SHOW_UNCATEGORIZED, false ) ||
                  startsWith( env.SHOW_UNCATEGORIZED, false )
              env:
                  CHANGELOG_CATEGORIZED: ${{ steps.task_release_changelog_categorized.outputs.changelog }}
              run: |
                  echo "$CHANGELOG_CATEGORIZED"

            - name: '🙊 Changelog › Step to Env › Uncategorized'
              id: task_release_changelog_escape_uncategorized
              if: |
                  startsWith( inputs.SHOW_UNCATEGORIZED, true ) ||
                  startsWith( env.SHOW_UNCATEGORIZED, true )
              env:
                  CHANGELOG_UNCATEGORIZED: ${{ steps.task_release_changelog_categorized.outputs.changelog }}
              run: |
                  echo "$CHANGELOG_UNCATEGORIZED"

            # #
            #   Release › Download Artifacts
            # #

            - name: '📁 Download › Saved Artifacts'
              uses: actions/download-artifact@v4

            # #
            #   Release › Verbose › List Tree
            # #

            - name: '🌲 Debug › Verbose Tree Listing'
              run: |
                  echo "―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――"
                  echo " PWD ..................... ${PWD}"
                  echo " GITHUB.WORKSPACE ........ ${{ github.workspace }}"
                  echo -e
                  echo -e
                  tree -I node_modules -I .git -I blocklists -I ./
                  echo "―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――"

            # #
            #   Release › Post Release (Stable)
            #
            #   outputs:
            #       [RELEASE ID]:
            #           ${{ steps.task_release_bundle_rc.outputs.id
            #           ${{ steps.task_release_bundle_st.outputs.id
            # #

            - name: '🏳️ Post › Stable'
              id: task_release_bundle_st
              if: |
                  startsWith( inputs.RC_RELEASE, false ) ||
                  startsWith( env.RC_RELEASE, false )
              uses: softprops/action-gh-release@v2
              env:
                  GITHUB_TOKEN: ${{ secrets.ADMINSERV_TOKEN_CL }}
              with:
                  token: ${{ secrets.ADMINSERV_TOKEN_CL }}
                  name: v${{ env.VERSION_CSF }}
                  tag_name: ${{ env.VERSION_CSF }}
                  target_commitish: ${{ github.event.inputs.branch }}
                  draft: false
                  generate_release_notes: false
                  files: |
                      ${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}.zip
                      ${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}-helpers.zip
                      ${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}-theme-dark.zip
                  prerelease: false
                  body: |
                      ${{ steps.task_release_changelog_categorized.outputs.changelog }}
                      ${{ steps.task_release_changelog_uncategorized.outputs.changelog }}

            # #
            #   Release › Post Release (Release Candidate)
            #
            #   outputs:
            #       [RELEASE ID]:
            #           ${{ steps.task_release_bundle_rc.outputs.id
            #           ${{ steps.task_release_bundle_st.outputs.id
            # #

            - name: '🏳️ Post › Release Candidate'
              id: task_release_bundle_rc
              uses: softprops/action-gh-release@v2
              if: |
                  startsWith( inputs.RC_RELEASE, true ) ||
                  startsWith( env.RC_RELEASE, true )
              env:
                  GITHUB_TOKEN: ${{ secrets.ADMINSERV_TOKEN }}
              with:
                  token: ${{ secrets.ADMINSERV_TOKEN }}
                  name: v${{ env.VERSION_CSF }}
                  tag_name: ${{ env.VERSION_CSF }}
                  target_commitish: ${{ github.event.inputs.branch }}
                  draft: false
                  generate_release_notes: false
                  files: |
                      ${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}-rc.${{ env.RC_VERSION }}.zip
                      ${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}-rc.${{ env.RC_VERSION }}-helpers.zip
                      ${{ env.PROJECT_NAME }}-v${{ env.VERSION_CSF }}-rc.${{ env.RC_VERSION }}-theme-dark.zip
                  prerelease: false
                  body: |
                      > [!WARNING]
                      > This is a **release candidate**, which means it is not a stable release and could contain bugs. You should download it at your own risk.

                      ${{ steps.task_release_changelog_categorized.outputs.changelog }}
                      ${{ steps.task_release_changelog_uncategorized.outputs.changelog }}

            # #
            #   Release › Print Status
            #
            #   For every step that you need to print the changelog text, first define the env var
            #   env:
            #       CHANGELOG_CATEGORIZED: ${{ steps.task_release_changelog_categorized.outputs.changelog }}
            #
            #   Then you can call the changelog in the body / run command with
            #       echo "$CHANGELOG_CATEGORIZED"
            # #

            - name: '🎛️ Status › Print'
              id: task_release_status_print
              env:
                  CHANGELOG_CATEGORIZED: ${{ steps.task_release_changelog_categorized.outputs.changelog }}
                  CHANGELOG_UNCATEGORIZED: ${{ steps.task_release_changelog_categorized.outputs.changelog }}
              run: |
                  echo "Printing Variables"
                  echo
                  echo "---- CHANGELOG ---------------------------------------------------------------"
                  echo "$CHANGELOG_CATEGORIZED"
                  echo "$CHANGELOG_UNCATEGORIZED"
                  echo "---- CHANGELOG ---------------------------------------------------------------"
                  echo ""
                  echo ""
                  echo "---- VARIABLES ---------------------------------------------------------------"
                  echo "Package Version ............ ${{ env.VERSION_CSF }}"
                  echo "Tag: Previous .............. ${{ env.TAG_LAST }}"
                  echo "Tag: Now.... ............... ${{ github.ref }}"
                  echo "Last Commit ................ ${{ env.COMMIT_LAST }}"
                  echo "ST Output ID ............... ${{ steps.task_release_bundle_st.outputs.id }}"
                  echo "RC Output ID ............... ${{ steps.task_release_bundle_rc.outputs.id }}"
                  echo "---- CHANGELOG ---------------------------------------------------------------"
